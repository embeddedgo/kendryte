// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/bus"
	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	DATA_OUTPUT          RDATA_OUTPUT
	DIRECTION            RDIRECTION
	SOURCE               RSOURCE
	_                    [9]uint32
	INTERRUPT_ENABLE     RINTERRUPT_ENABLE
	INTERRUPT_MASK       RINTERRUPT_MASK
	INTERRUPT_LEVEL      RINTERRUPT_LEVEL
	INTERRUPT_POLARITY   RINTERRUPT_POLARITY
	INTERRUPT_STATUS     RINTERRUPT_STATUS
	INTERRUPT_STATUS_RAW RINTERRUPT_STATUS_RAW
	INTERRUPT_DEBOUNCE   RINTERRUPT_DEBOUNCE
	INTERRUPT_CLEAR      RINTERRUPT_CLEAR
	DATA_INPUT           RDATA_INPUT
	_                    [3]uint32
	SYNC_LEVEL           RSYNC_LEVEL
	ID_CODE              RID_CODE
	INTERRUPT_BOTHEDGE   RINTERRUPT_BOTHEDGE
}

func GPIO() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB0
}

type DATA_OUTPUT uint32

type RDATA_OUTPUT struct{ mmio.U32 }

func (r *RDATA_OUTPUT) LoadBits(mask DATA_OUTPUT) DATA_OUTPUT {
	return DATA_OUTPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RDATA_OUTPUT) StoreBits(mask, b DATA_OUTPUT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDATA_OUTPUT) SetBits(mask DATA_OUTPUT)      { r.U32.SetBits(uint32(mask)) }
func (r *RDATA_OUTPUT) ClearBits(mask DATA_OUTPUT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDATA_OUTPUT) Load() DATA_OUTPUT             { return DATA_OUTPUT(r.U32.Load()) }
func (r *RDATA_OUTPUT) Store(b DATA_OUTPUT)           { r.U32.Store(uint32(b)) }

type RMDATA_OUTPUT struct{ mmio.UM32 }

func (rm RMDATA_OUTPUT) Load() DATA_OUTPUT   { return DATA_OUTPUT(rm.UM32.Load()) }
func (rm RMDATA_OUTPUT) Store(b DATA_OUTPUT) { rm.UM32.Store(uint32(b)) }

type DIRECTION uint32

type RDIRECTION struct{ mmio.U32 }

func (r *RDIRECTION) LoadBits(mask DIRECTION) DIRECTION {
	return DIRECTION(r.U32.LoadBits(uint32(mask)))
}
func (r *RDIRECTION) StoreBits(mask, b DIRECTION) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIRECTION) SetBits(mask DIRECTION)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIRECTION) ClearBits(mask DIRECTION)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIRECTION) Load() DIRECTION             { return DIRECTION(r.U32.Load()) }
func (r *RDIRECTION) Store(b DIRECTION)           { r.U32.Store(uint32(b)) }

type RMDIRECTION struct{ mmio.UM32 }

func (rm RMDIRECTION) Load() DIRECTION   { return DIRECTION(rm.UM32.Load()) }
func (rm RMDIRECTION) Store(b DIRECTION) { rm.UM32.Store(uint32(b)) }

type SOURCE uint32

type RSOURCE struct{ mmio.U32 }

func (r *RSOURCE) LoadBits(mask SOURCE) SOURCE { return SOURCE(r.U32.LoadBits(uint32(mask))) }
func (r *RSOURCE) StoreBits(mask, b SOURCE)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSOURCE) SetBits(mask SOURCE)         { r.U32.SetBits(uint32(mask)) }
func (r *RSOURCE) ClearBits(mask SOURCE)       { r.U32.ClearBits(uint32(mask)) }
func (r *RSOURCE) Load() SOURCE                { return SOURCE(r.U32.Load()) }
func (r *RSOURCE) Store(b SOURCE)              { r.U32.Store(uint32(b)) }

type RMSOURCE struct{ mmio.UM32 }

func (rm RMSOURCE) Load() SOURCE   { return SOURCE(rm.UM32.Load()) }
func (rm RMSOURCE) Store(b SOURCE) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_ENABLE uint32

type RINTERRUPT_ENABLE struct{ mmio.U32 }

func (r *RINTERRUPT_ENABLE) LoadBits(mask INTERRUPT_ENABLE) INTERRUPT_ENABLE {
	return INTERRUPT_ENABLE(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_ENABLE) StoreBits(mask, b INTERRUPT_ENABLE) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_ENABLE) SetBits(mask INTERRUPT_ENABLE)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_ENABLE) ClearBits(mask INTERRUPT_ENABLE) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_ENABLE) Load() INTERRUPT_ENABLE          { return INTERRUPT_ENABLE(r.U32.Load()) }
func (r *RINTERRUPT_ENABLE) Store(b INTERRUPT_ENABLE)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_ENABLE struct{ mmio.UM32 }

func (rm RMINTERRUPT_ENABLE) Load() INTERRUPT_ENABLE   { return INTERRUPT_ENABLE(rm.UM32.Load()) }
func (rm RMINTERRUPT_ENABLE) Store(b INTERRUPT_ENABLE) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_MASK uint32

type RINTERRUPT_MASK struct{ mmio.U32 }

func (r *RINTERRUPT_MASK) LoadBits(mask INTERRUPT_MASK) INTERRUPT_MASK {
	return INTERRUPT_MASK(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_MASK) StoreBits(mask, b INTERRUPT_MASK) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINTERRUPT_MASK) SetBits(mask INTERRUPT_MASK)      { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_MASK) ClearBits(mask INTERRUPT_MASK)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_MASK) Load() INTERRUPT_MASK             { return INTERRUPT_MASK(r.U32.Load()) }
func (r *RINTERRUPT_MASK) Store(b INTERRUPT_MASK)           { r.U32.Store(uint32(b)) }

type RMINTERRUPT_MASK struct{ mmio.UM32 }

func (rm RMINTERRUPT_MASK) Load() INTERRUPT_MASK   { return INTERRUPT_MASK(rm.UM32.Load()) }
func (rm RMINTERRUPT_MASK) Store(b INTERRUPT_MASK) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_LEVEL uint32

type RINTERRUPT_LEVEL struct{ mmio.U32 }

func (r *RINTERRUPT_LEVEL) LoadBits(mask INTERRUPT_LEVEL) INTERRUPT_LEVEL {
	return INTERRUPT_LEVEL(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_LEVEL) StoreBits(mask, b INTERRUPT_LEVEL) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_LEVEL) SetBits(mask INTERRUPT_LEVEL)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_LEVEL) ClearBits(mask INTERRUPT_LEVEL) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_LEVEL) Load() INTERRUPT_LEVEL          { return INTERRUPT_LEVEL(r.U32.Load()) }
func (r *RINTERRUPT_LEVEL) Store(b INTERRUPT_LEVEL)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_LEVEL struct{ mmio.UM32 }

func (rm RMINTERRUPT_LEVEL) Load() INTERRUPT_LEVEL   { return INTERRUPT_LEVEL(rm.UM32.Load()) }
func (rm RMINTERRUPT_LEVEL) Store(b INTERRUPT_LEVEL) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_POLARITY uint32

type RINTERRUPT_POLARITY struct{ mmio.U32 }

func (r *RINTERRUPT_POLARITY) LoadBits(mask INTERRUPT_POLARITY) INTERRUPT_POLARITY {
	return INTERRUPT_POLARITY(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_POLARITY) StoreBits(mask, b INTERRUPT_POLARITY) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_POLARITY) SetBits(mask INTERRUPT_POLARITY)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_POLARITY) ClearBits(mask INTERRUPT_POLARITY) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_POLARITY) Load() INTERRUPT_POLARITY          { return INTERRUPT_POLARITY(r.U32.Load()) }
func (r *RINTERRUPT_POLARITY) Store(b INTERRUPT_POLARITY)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_POLARITY struct{ mmio.UM32 }

func (rm RMINTERRUPT_POLARITY) Load() INTERRUPT_POLARITY   { return INTERRUPT_POLARITY(rm.UM32.Load()) }
func (rm RMINTERRUPT_POLARITY) Store(b INTERRUPT_POLARITY) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_STATUS uint32

type RINTERRUPT_STATUS struct{ mmio.U32 }

func (r *RINTERRUPT_STATUS) LoadBits(mask INTERRUPT_STATUS) INTERRUPT_STATUS {
	return INTERRUPT_STATUS(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_STATUS) StoreBits(mask, b INTERRUPT_STATUS) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_STATUS) SetBits(mask INTERRUPT_STATUS)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_STATUS) ClearBits(mask INTERRUPT_STATUS) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_STATUS) Load() INTERRUPT_STATUS          { return INTERRUPT_STATUS(r.U32.Load()) }
func (r *RINTERRUPT_STATUS) Store(b INTERRUPT_STATUS)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_STATUS struct{ mmio.UM32 }

func (rm RMINTERRUPT_STATUS) Load() INTERRUPT_STATUS   { return INTERRUPT_STATUS(rm.UM32.Load()) }
func (rm RMINTERRUPT_STATUS) Store(b INTERRUPT_STATUS) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_STATUS_RAW uint32

type RINTERRUPT_STATUS_RAW struct{ mmio.U32 }

func (r *RINTERRUPT_STATUS_RAW) LoadBits(mask INTERRUPT_STATUS_RAW) INTERRUPT_STATUS_RAW {
	return INTERRUPT_STATUS_RAW(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_STATUS_RAW) StoreBits(mask, b INTERRUPT_STATUS_RAW) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_STATUS_RAW) SetBits(mask INTERRUPT_STATUS_RAW)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_STATUS_RAW) ClearBits(mask INTERRUPT_STATUS_RAW) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_STATUS_RAW) Load() INTERRUPT_STATUS_RAW {
	return INTERRUPT_STATUS_RAW(r.U32.Load())
}
func (r *RINTERRUPT_STATUS_RAW) Store(b INTERRUPT_STATUS_RAW) { r.U32.Store(uint32(b)) }

type RMINTERRUPT_STATUS_RAW struct{ mmio.UM32 }

func (rm RMINTERRUPT_STATUS_RAW) Load() INTERRUPT_STATUS_RAW {
	return INTERRUPT_STATUS_RAW(rm.UM32.Load())
}
func (rm RMINTERRUPT_STATUS_RAW) Store(b INTERRUPT_STATUS_RAW) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_DEBOUNCE uint32

type RINTERRUPT_DEBOUNCE struct{ mmio.U32 }

func (r *RINTERRUPT_DEBOUNCE) LoadBits(mask INTERRUPT_DEBOUNCE) INTERRUPT_DEBOUNCE {
	return INTERRUPT_DEBOUNCE(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_DEBOUNCE) StoreBits(mask, b INTERRUPT_DEBOUNCE) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_DEBOUNCE) SetBits(mask INTERRUPT_DEBOUNCE)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_DEBOUNCE) ClearBits(mask INTERRUPT_DEBOUNCE) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_DEBOUNCE) Load() INTERRUPT_DEBOUNCE          { return INTERRUPT_DEBOUNCE(r.U32.Load()) }
func (r *RINTERRUPT_DEBOUNCE) Store(b INTERRUPT_DEBOUNCE)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_DEBOUNCE struct{ mmio.UM32 }

func (rm RMINTERRUPT_DEBOUNCE) Load() INTERRUPT_DEBOUNCE   { return INTERRUPT_DEBOUNCE(rm.UM32.Load()) }
func (rm RMINTERRUPT_DEBOUNCE) Store(b INTERRUPT_DEBOUNCE) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_CLEAR uint32

type RINTERRUPT_CLEAR struct{ mmio.U32 }

func (r *RINTERRUPT_CLEAR) LoadBits(mask INTERRUPT_CLEAR) INTERRUPT_CLEAR {
	return INTERRUPT_CLEAR(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_CLEAR) StoreBits(mask, b INTERRUPT_CLEAR) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_CLEAR) SetBits(mask INTERRUPT_CLEAR)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_CLEAR) ClearBits(mask INTERRUPT_CLEAR) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_CLEAR) Load() INTERRUPT_CLEAR          { return INTERRUPT_CLEAR(r.U32.Load()) }
func (r *RINTERRUPT_CLEAR) Store(b INTERRUPT_CLEAR)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_CLEAR struct{ mmio.UM32 }

func (rm RMINTERRUPT_CLEAR) Load() INTERRUPT_CLEAR   { return INTERRUPT_CLEAR(rm.UM32.Load()) }
func (rm RMINTERRUPT_CLEAR) Store(b INTERRUPT_CLEAR) { rm.UM32.Store(uint32(b)) }

type DATA_INPUT uint32

type RDATA_INPUT struct{ mmio.U32 }

func (r *RDATA_INPUT) LoadBits(mask DATA_INPUT) DATA_INPUT {
	return DATA_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RDATA_INPUT) StoreBits(mask, b DATA_INPUT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDATA_INPUT) SetBits(mask DATA_INPUT)      { r.U32.SetBits(uint32(mask)) }
func (r *RDATA_INPUT) ClearBits(mask DATA_INPUT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDATA_INPUT) Load() DATA_INPUT             { return DATA_INPUT(r.U32.Load()) }
func (r *RDATA_INPUT) Store(b DATA_INPUT)           { r.U32.Store(uint32(b)) }

type RMDATA_INPUT struct{ mmio.UM32 }

func (rm RMDATA_INPUT) Load() DATA_INPUT   { return DATA_INPUT(rm.UM32.Load()) }
func (rm RMDATA_INPUT) Store(b DATA_INPUT) { rm.UM32.Store(uint32(b)) }

type SYNC_LEVEL uint32

type RSYNC_LEVEL struct{ mmio.U32 }

func (r *RSYNC_LEVEL) LoadBits(mask SYNC_LEVEL) SYNC_LEVEL {
	return SYNC_LEVEL(r.U32.LoadBits(uint32(mask)))
}
func (r *RSYNC_LEVEL) StoreBits(mask, b SYNC_LEVEL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSYNC_LEVEL) SetBits(mask SYNC_LEVEL)      { r.U32.SetBits(uint32(mask)) }
func (r *RSYNC_LEVEL) ClearBits(mask SYNC_LEVEL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSYNC_LEVEL) Load() SYNC_LEVEL             { return SYNC_LEVEL(r.U32.Load()) }
func (r *RSYNC_LEVEL) Store(b SYNC_LEVEL)           { r.U32.Store(uint32(b)) }

type RMSYNC_LEVEL struct{ mmio.UM32 }

func (rm RMSYNC_LEVEL) Load() SYNC_LEVEL   { return SYNC_LEVEL(rm.UM32.Load()) }
func (rm RMSYNC_LEVEL) Store(b SYNC_LEVEL) { rm.UM32.Store(uint32(b)) }

type ID_CODE uint32

type RID_CODE struct{ mmio.U32 }

func (r *RID_CODE) LoadBits(mask ID_CODE) ID_CODE { return ID_CODE(r.U32.LoadBits(uint32(mask))) }
func (r *RID_CODE) StoreBits(mask, b ID_CODE)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RID_CODE) SetBits(mask ID_CODE)          { r.U32.SetBits(uint32(mask)) }
func (r *RID_CODE) ClearBits(mask ID_CODE)        { r.U32.ClearBits(uint32(mask)) }
func (r *RID_CODE) Load() ID_CODE                 { return ID_CODE(r.U32.Load()) }
func (r *RID_CODE) Store(b ID_CODE)               { r.U32.Store(uint32(b)) }

type RMID_CODE struct{ mmio.UM32 }

func (rm RMID_CODE) Load() ID_CODE   { return ID_CODE(rm.UM32.Load()) }
func (rm RMID_CODE) Store(b ID_CODE) { rm.UM32.Store(uint32(b)) }

type INTERRUPT_BOTHEDGE uint32

type RINTERRUPT_BOTHEDGE struct{ mmio.U32 }

func (r *RINTERRUPT_BOTHEDGE) LoadBits(mask INTERRUPT_BOTHEDGE) INTERRUPT_BOTHEDGE {
	return INTERRUPT_BOTHEDGE(r.U32.LoadBits(uint32(mask)))
}
func (r *RINTERRUPT_BOTHEDGE) StoreBits(mask, b INTERRUPT_BOTHEDGE) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RINTERRUPT_BOTHEDGE) SetBits(mask INTERRUPT_BOTHEDGE)   { r.U32.SetBits(uint32(mask)) }
func (r *RINTERRUPT_BOTHEDGE) ClearBits(mask INTERRUPT_BOTHEDGE) { r.U32.ClearBits(uint32(mask)) }
func (r *RINTERRUPT_BOTHEDGE) Load() INTERRUPT_BOTHEDGE          { return INTERRUPT_BOTHEDGE(r.U32.Load()) }
func (r *RINTERRUPT_BOTHEDGE) Store(b INTERRUPT_BOTHEDGE)        { r.U32.Store(uint32(b)) }

type RMINTERRUPT_BOTHEDGE struct{ mmio.UM32 }

func (rm RMINTERRUPT_BOTHEDGE) Load() INTERRUPT_BOTHEDGE   { return INTERRUPT_BOTHEDGE(rm.UM32.Load()) }
func (rm RMINTERRUPT_BOTHEDGE) Store(b INTERRUPT_BOTHEDGE) { rm.UM32.Store(uint32(b)) }
