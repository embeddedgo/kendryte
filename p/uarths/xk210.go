// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package uarths

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	TXDATA RTXDATA
	RXDATA RRXDATA
	TXCTRL RTXCTRL
	RXCTRL RRXCTRL
	IE     RIE
	IP     RIP
	DIV    RDIV
}

func UARTHS() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UARTHS_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type TXDATA uint32

type RTXDATA struct{ mmio.U32 }

func (r *RTXDATA) LoadBits(mask TXDATA) TXDATA { return TXDATA(r.U32.LoadBits(uint32(mask))) }
func (r *RTXDATA) StoreBits(mask, b TXDATA)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXDATA) SetBits(mask TXDATA)         { r.U32.SetBits(uint32(mask)) }
func (r *RTXDATA) ClearBits(mask TXDATA)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTXDATA) Load() TXDATA                { return TXDATA(r.U32.Load()) }
func (r *RTXDATA) Store(b TXDATA)              { r.U32.Store(uint32(b)) }

type RMTXDATA struct{ mmio.UM32 }

func (rm RMTXDATA) Load() TXDATA   { return TXDATA(rm.UM32.Load()) }
func (rm RMTXDATA) Store(b TXDATA) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TXD() RMTXDATA {
	return RMTXDATA{mmio.UM32{&p.TXDATA.U32, uint32(TXD)}}
}

func (p *Periph) TXFULL() RMTXDATA {
	return RMTXDATA{mmio.UM32{&p.TXDATA.U32, uint32(TXFULL)}}
}

type RXDATA uint32

type RRXDATA struct{ mmio.U32 }

func (r *RRXDATA) LoadBits(mask RXDATA) RXDATA { return RXDATA(r.U32.LoadBits(uint32(mask))) }
func (r *RRXDATA) StoreBits(mask, b RXDATA)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXDATA) SetBits(mask RXDATA)         { r.U32.SetBits(uint32(mask)) }
func (r *RRXDATA) ClearBits(mask RXDATA)       { r.U32.ClearBits(uint32(mask)) }
func (r *RRXDATA) Load() RXDATA                { return RXDATA(r.U32.Load()) }
func (r *RRXDATA) Store(b RXDATA)              { r.U32.Store(uint32(b)) }

type RMRXDATA struct{ mmio.UM32 }

func (rm RMRXDATA) Load() RXDATA   { return RXDATA(rm.UM32.Load()) }
func (rm RMRXDATA) Store(b RXDATA) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RXD() RMRXDATA {
	return RMRXDATA{mmio.UM32{&p.RXDATA.U32, uint32(RXD)}}
}

func (p *Periph) RXEMPTY() RMRXDATA {
	return RMRXDATA{mmio.UM32{&p.RXDATA.U32, uint32(RXEMPTY)}}
}

type TXCTRL uint32

type RTXCTRL struct{ mmio.U32 }

func (r *RTXCTRL) LoadBits(mask TXCTRL) TXCTRL { return TXCTRL(r.U32.LoadBits(uint32(mask))) }
func (r *RTXCTRL) StoreBits(mask, b TXCTRL)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXCTRL) SetBits(mask TXCTRL)         { r.U32.SetBits(uint32(mask)) }
func (r *RTXCTRL) ClearBits(mask TXCTRL)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTXCTRL) Load() TXCTRL                { return TXCTRL(r.U32.Load()) }
func (r *RTXCTRL) Store(b TXCTRL)              { r.U32.Store(uint32(b)) }

type RMTXCTRL struct{ mmio.UM32 }

func (rm RMTXCTRL) Load() TXCTRL   { return TXCTRL(rm.UM32.Load()) }
func (rm RMTXCTRL) Store(b TXCTRL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TXEN() RMTXCTRL {
	return RMTXCTRL{mmio.UM32{&p.TXCTRL.U32, uint32(TXEN)}}
}

func (p *Periph) NSTOP() RMTXCTRL {
	return RMTXCTRL{mmio.UM32{&p.TXCTRL.U32, uint32(NSTOP)}}
}

func (p *Periph) TXCNT() RMTXCTRL {
	return RMTXCTRL{mmio.UM32{&p.TXCTRL.U32, uint32(TXCNT)}}
}

type RXCTRL uint32

type RRXCTRL struct{ mmio.U32 }

func (r *RRXCTRL) LoadBits(mask RXCTRL) RXCTRL { return RXCTRL(r.U32.LoadBits(uint32(mask))) }
func (r *RRXCTRL) StoreBits(mask, b RXCTRL)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXCTRL) SetBits(mask RXCTRL)         { r.U32.SetBits(uint32(mask)) }
func (r *RRXCTRL) ClearBits(mask RXCTRL)       { r.U32.ClearBits(uint32(mask)) }
func (r *RRXCTRL) Load() RXCTRL                { return RXCTRL(r.U32.Load()) }
func (r *RRXCTRL) Store(b RXCTRL)              { r.U32.Store(uint32(b)) }

type RMRXCTRL struct{ mmio.UM32 }

func (rm RMRXCTRL) Load() RXCTRL   { return RXCTRL(rm.UM32.Load()) }
func (rm RMRXCTRL) Store(b RXCTRL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RXEN() RMRXCTRL {
	return RMRXCTRL{mmio.UM32{&p.RXCTRL.U32, uint32(RXEN)}}
}

func (p *Periph) RXCNT() RMRXCTRL {
	return RMRXCTRL{mmio.UM32{&p.RXCTRL.U32, uint32(RXCNT)}}
}

type IE uint32

type RIE struct{ mmio.U32 }

func (r *RIE) LoadBits(mask IE) IE  { return IE(r.U32.LoadBits(uint32(mask))) }
func (r *RIE) StoreBits(mask, b IE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIE) SetBits(mask IE)      { r.U32.SetBits(uint32(mask)) }
func (r *RIE) ClearBits(mask IE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIE) Load() IE             { return IE(r.U32.Load()) }
func (r *RIE) Store(b IE)           { r.U32.Store(uint32(b)) }

type RMIE struct{ mmio.UM32 }

func (rm RMIE) Load() IE   { return IE(rm.UM32.Load()) }
func (rm RMIE) Store(b IE) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TXWMIE() RMIE {
	return RMIE{mmio.UM32{&p.IE.U32, uint32(TXWMIE)}}
}

func (p *Periph) RXWMIE() RMIE {
	return RMIE{mmio.UM32{&p.IE.U32, uint32(RXWMIE)}}
}

type IP uint32

type RIP struct{ mmio.U32 }

func (r *RIP) LoadBits(mask IP) IP  { return IP(r.U32.LoadBits(uint32(mask))) }
func (r *RIP) StoreBits(mask, b IP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIP) SetBits(mask IP)      { r.U32.SetBits(uint32(mask)) }
func (r *RIP) ClearBits(mask IP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIP) Load() IP             { return IP(r.U32.Load()) }
func (r *RIP) Store(b IP)           { r.U32.Store(uint32(b)) }

type RMIP struct{ mmio.UM32 }

func (rm RMIP) Load() IP   { return IP(rm.UM32.Load()) }
func (rm RMIP) Store(b IP) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TXWMIP() RMIP {
	return RMIP{mmio.UM32{&p.IP.U32, uint32(TXWMIP)}}
}

func (p *Periph) RXWMIP() RMIP {
	return RMIP{mmio.UM32{&p.IP.U32, uint32(RXWMIP)}}
}

type DIV uint32

type RDIV struct{ mmio.U32 }

func (r *RDIV) LoadBits(mask DIV) DIV { return DIV(r.U32.LoadBits(uint32(mask))) }
func (r *RDIV) StoreBits(mask, b DIV) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIV) SetBits(mask DIV)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIV) ClearBits(mask DIV)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIV) Load() DIV             { return DIV(r.U32.Load()) }
func (r *RDIV) Store(b DIV)           { r.U32.Store(uint32(b)) }

type RMDIV struct{ mmio.UM32 }

func (rm RMDIV) Load() DIV   { return DIV(rm.UM32.Load()) }
func (rm RMDIV) Store(b DIV) { rm.UM32.Store(uint32(b)) }
