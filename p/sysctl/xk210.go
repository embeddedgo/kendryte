// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package sysctl

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	GIT_ID       RGIT_ID
	CLK_FREQ     RCLK_FREQ
	PLL          [3]RPLL
	_            uint32
	PLL_LOCK     RPLL_LOCK
	ROM_ERROR    RROM_ERROR
	CLK_SEL0     RCLK_SEL0
	CLK_SEL1     RCLK_SEL1
	CLK_EN_CENT  RCLK_EN_CENT
	CLK_EN_PERI  RCLK_EN_PERI
	SOFT_RESET   RSOFT_RESET
	PERI_RESET   RPERI_RESET
	CLK_TH0      RCLK_TH0
	CLK_TH1      RCLK_TH1
	CLK_TH2      RCLK_TH2
	CLK_TH3      RCLK_TH3
	CLK_TH4      RCLK_TH4
	CLK_TH5      RCLK_TH5
	CLK_TH6      RCLK_TH6
	MISC         RMISC
	PERI         RPERI
	SPI_SLEEP    RSPI_SLEEP
	RESET_STATUS RRESET_STATUS
	DMA_SEL0     RDMA_SEL0
	DMA_SEL1     RDMA_SEL1
	POWER_SEL    RPOWER_SEL
}

func SYSCTL() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCTL_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type GIT_ID uint32

type RGIT_ID struct{ mmio.U32 }

func (r *RGIT_ID) LoadBits(mask GIT_ID) GIT_ID { return GIT_ID(r.U32.LoadBits(uint32(mask))) }
func (r *RGIT_ID) StoreBits(mask, b GIT_ID)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGIT_ID) SetBits(mask GIT_ID)         { r.U32.SetBits(uint32(mask)) }
func (r *RGIT_ID) ClearBits(mask GIT_ID)       { r.U32.ClearBits(uint32(mask)) }
func (r *RGIT_ID) Load() GIT_ID                { return GIT_ID(r.U32.Load()) }
func (r *RGIT_ID) Store(b GIT_ID)              { r.U32.Store(uint32(b)) }

type RMGIT_ID struct{ mmio.UM32 }

func (rm RMGIT_ID) Load() GIT_ID   { return GIT_ID(rm.UM32.Load()) }
func (rm RMGIT_ID) Store(b GIT_ID) { rm.UM32.Store(uint32(b)) }

type CLK_FREQ uint32

type RCLK_FREQ struct{ mmio.U32 }

func (r *RCLK_FREQ) LoadBits(mask CLK_FREQ) CLK_FREQ { return CLK_FREQ(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_FREQ) StoreBits(mask, b CLK_FREQ)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_FREQ) SetBits(mask CLK_FREQ)           { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_FREQ) ClearBits(mask CLK_FREQ)         { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_FREQ) Load() CLK_FREQ                  { return CLK_FREQ(r.U32.Load()) }
func (r *RCLK_FREQ) Store(b CLK_FREQ)                { r.U32.Store(uint32(b)) }

type RMCLK_FREQ struct{ mmio.UM32 }

func (rm RMCLK_FREQ) Load() CLK_FREQ   { return CLK_FREQ(rm.UM32.Load()) }
func (rm RMCLK_FREQ) Store(b CLK_FREQ) { rm.UM32.Store(uint32(b)) }

type PLL uint32

type RPLL struct{ mmio.U32 }

func (r *RPLL) LoadBits(mask PLL) PLL { return PLL(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL) StoreBits(mask, b PLL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL) SetBits(mask PLL)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL) ClearBits(mask PLL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL) Load() PLL             { return PLL(r.U32.Load()) }
func (r *RPLL) Store(b PLL)           { r.U32.Store(uint32(b)) }

type RMPLL struct{ mmio.UM32 }

func (rm RMPLL) Load() PLL   { return PLL(rm.UM32.Load()) }
func (rm RMPLL) Store(b PLL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CLKR(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(CLKR)}}
}

func (p *Periph) CLKF(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(CLKF)}}
}

func (p *Periph) CLKOD(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(CLKOD)}}
}

func (p *Periph) BWADJ(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(BWADJ)}}
}

func (p *Periph) RESET(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(RESET)}}
}

func (p *Periph) PWRD(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(PWRD)}}
}

func (p *Periph) INTFB(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(INTFB)}}
}

func (p *Periph) BYPASS(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(BYPASS)}}
}

func (p *Periph) TEST(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(TEST)}}
}

func (p *Periph) OUT_EN(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(OUT_EN)}}
}

func (p *Periph) TEST_EN_CKIN_SEL(n int) RMPLL {
	return RMPLL{mmio.UM32{&p.PLL[n].U32, uint32(TEST_EN_CKIN_SEL)}}
}

type PLL_LOCK uint32

type RPLL_LOCK struct{ mmio.U32 }

func (r *RPLL_LOCK) LoadBits(mask PLL_LOCK) PLL_LOCK { return PLL_LOCK(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_LOCK) StoreBits(mask, b PLL_LOCK)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_LOCK) SetBits(mask PLL_LOCK)           { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_LOCK) ClearBits(mask PLL_LOCK)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_LOCK) Load() PLL_LOCK                  { return PLL_LOCK(r.U32.Load()) }
func (r *RPLL_LOCK) Store(b PLL_LOCK)                { r.U32.Store(uint32(b)) }

type RMPLL_LOCK struct{ mmio.UM32 }

func (rm RMPLL_LOCK) Load() PLL_LOCK   { return PLL_LOCK(rm.UM32.Load()) }
func (rm RMPLL_LOCK) Store(b PLL_LOCK) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PLL_LOCK0() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_LOCK0)}}
}

func (p *Periph) PLL_SLIP_CLEAR0() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_SLIP_CLEAR0)}}
}

func (p *Periph) TEST_CLK_OUT0() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(TEST_CLK_OUT0)}}
}

func (p *Periph) PLL_LOCK1() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_LOCK1)}}
}

func (p *Periph) PLL_SLIP_CLEAR1() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_SLIP_CLEAR1)}}
}

func (p *Periph) TEST_CLK_OUT1() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(TEST_CLK_OUT1)}}
}

func (p *Periph) PLL_LOCK2() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_LOCK2)}}
}

func (p *Periph) PLL_SLIP_CLEAR2() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(PLL_SLIP_CLEAR2)}}
}

func (p *Periph) TEST_CLK_OUT2() RMPLL_LOCK {
	return RMPLL_LOCK{mmio.UM32{&p.PLL_LOCK.U32, uint32(TEST_CLK_OUT2)}}
}

type ROM_ERROR uint32

type RROM_ERROR struct{ mmio.U32 }

func (r *RROM_ERROR) LoadBits(mask ROM_ERROR) ROM_ERROR {
	return ROM_ERROR(r.U32.LoadBits(uint32(mask)))
}
func (r *RROM_ERROR) StoreBits(mask, b ROM_ERROR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RROM_ERROR) SetBits(mask ROM_ERROR)      { r.U32.SetBits(uint32(mask)) }
func (r *RROM_ERROR) ClearBits(mask ROM_ERROR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RROM_ERROR) Load() ROM_ERROR             { return ROM_ERROR(r.U32.Load()) }
func (r *RROM_ERROR) Store(b ROM_ERROR)           { r.U32.Store(uint32(b)) }

type RMROM_ERROR struct{ mmio.UM32 }

func (rm RMROM_ERROR) Load() ROM_ERROR   { return ROM_ERROR(rm.UM32.Load()) }
func (rm RMROM_ERROR) Store(b ROM_ERROR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ROM_MUL_ERROR() RMROM_ERROR {
	return RMROM_ERROR{mmio.UM32{&p.ROM_ERROR.U32, uint32(ROM_MUL_ERROR)}}
}

func (p *Periph) ROM_ONE_ERROR() RMROM_ERROR {
	return RMROM_ERROR{mmio.UM32{&p.ROM_ERROR.U32, uint32(ROM_ONE_ERROR)}}
}

type CLK_SEL0 uint32

type RCLK_SEL0 struct{ mmio.U32 }

func (r *RCLK_SEL0) LoadBits(mask CLK_SEL0) CLK_SEL0 { return CLK_SEL0(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_SEL0) StoreBits(mask, b CLK_SEL0)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_SEL0) SetBits(mask CLK_SEL0)           { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_SEL0) ClearBits(mask CLK_SEL0)         { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_SEL0) Load() CLK_SEL0                  { return CLK_SEL0(r.U32.Load()) }
func (r *RCLK_SEL0) Store(b CLK_SEL0)                { r.U32.Store(uint32(b)) }

type RMCLK_SEL0 struct{ mmio.UM32 }

func (rm RMCLK_SEL0) Load() CLK_SEL0   { return CLK_SEL0(rm.UM32.Load()) }
func (rm RMCLK_SEL0) Store(b CLK_SEL0) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ACLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(ACLK_SEL)}}
}

func (p *Periph) ACLK_DIVIDER_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(ACLK_DIVIDER_SEL)}}
}

func (p *Periph) APB0_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(APB0_CLK_SEL)}}
}

func (p *Periph) APB1_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(APB1_CLK_SEL)}}
}

func (p *Periph) APB2_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(APB2_CLK_SEL)}}
}

func (p *Periph) SPI3_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(SPI3_CLK_SEL)}}
}

func (p *Periph) TIMER0_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(TIMER0_CLK_SEL)}}
}

func (p *Periph) TIMER1_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(TIMER1_CLK_SEL)}}
}

func (p *Periph) TIMER2_CLK_SEL() RMCLK_SEL0 {
	return RMCLK_SEL0{mmio.UM32{&p.CLK_SEL0.U32, uint32(TIMER2_CLK_SEL)}}
}

type CLK_SEL1 uint32

type RCLK_SEL1 struct{ mmio.U32 }

func (r *RCLK_SEL1) LoadBits(mask CLK_SEL1) CLK_SEL1 { return CLK_SEL1(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_SEL1) StoreBits(mask, b CLK_SEL1)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_SEL1) SetBits(mask CLK_SEL1)           { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_SEL1) ClearBits(mask CLK_SEL1)         { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_SEL1) Load() CLK_SEL1                  { return CLK_SEL1(r.U32.Load()) }
func (r *RCLK_SEL1) Store(b CLK_SEL1)                { r.U32.Store(uint32(b)) }

type RMCLK_SEL1 struct{ mmio.UM32 }

func (rm RMCLK_SEL1) Load() CLK_SEL1   { return CLK_SEL1(rm.UM32.Load()) }
func (rm RMCLK_SEL1) Store(b CLK_SEL1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SPI3_SAMPLE_CLK_SEL() RMCLK_SEL1 {
	return RMCLK_SEL1{mmio.UM32{&p.CLK_SEL1.U32, uint32(SPI3_SAMPLE_CLK_SEL)}}
}

type CLK_EN_CENT uint32

type RCLK_EN_CENT struct{ mmio.U32 }

func (r *RCLK_EN_CENT) LoadBits(mask CLK_EN_CENT) CLK_EN_CENT {
	return CLK_EN_CENT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCLK_EN_CENT) StoreBits(mask, b CLK_EN_CENT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_EN_CENT) SetBits(mask CLK_EN_CENT)      { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_EN_CENT) ClearBits(mask CLK_EN_CENT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_EN_CENT) Load() CLK_EN_CENT             { return CLK_EN_CENT(r.U32.Load()) }
func (r *RCLK_EN_CENT) Store(b CLK_EN_CENT)           { r.U32.Store(uint32(b)) }

type RMCLK_EN_CENT struct{ mmio.UM32 }

func (rm RMCLK_EN_CENT) Load() CLK_EN_CENT   { return CLK_EN_CENT(rm.UM32.Load()) }
func (rm RMCLK_EN_CENT) Store(b CLK_EN_CENT) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CPU_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(CPU_CLK_EN)}}
}

func (p *Periph) SRAM0_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(SRAM0_CLK_EN)}}
}

func (p *Periph) SRAM1_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(SRAM1_CLK_EN)}}
}

func (p *Periph) APB0_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(APB0_CLK_EN)}}
}

func (p *Periph) APB1_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(APB1_CLK_EN)}}
}

func (p *Periph) APB2_CLK_EN() RMCLK_EN_CENT {
	return RMCLK_EN_CENT{mmio.UM32{&p.CLK_EN_CENT.U32, uint32(APB2_CLK_EN)}}
}

type CLK_EN_PERI uint32

type RCLK_EN_PERI struct{ mmio.U32 }

func (r *RCLK_EN_PERI) LoadBits(mask CLK_EN_PERI) CLK_EN_PERI {
	return CLK_EN_PERI(r.U32.LoadBits(uint32(mask)))
}
func (r *RCLK_EN_PERI) StoreBits(mask, b CLK_EN_PERI) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_EN_PERI) SetBits(mask CLK_EN_PERI)      { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_EN_PERI) ClearBits(mask CLK_EN_PERI)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_EN_PERI) Load() CLK_EN_PERI             { return CLK_EN_PERI(r.U32.Load()) }
func (r *RCLK_EN_PERI) Store(b CLK_EN_PERI)           { r.U32.Store(uint32(b)) }

type RMCLK_EN_PERI struct{ mmio.UM32 }

func (rm RMCLK_EN_PERI) Load() CLK_EN_PERI   { return CLK_EN_PERI(rm.UM32.Load()) }
func (rm RMCLK_EN_PERI) Store(b CLK_EN_PERI) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ROM_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(ROM_CLK_EN)}}
}

func (p *Periph) DMA_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(DMA_CLK_EN)}}
}

func (p *Periph) AI_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(AI_CLK_EN)}}
}

func (p *Periph) DVP_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(DVP_CLK_EN)}}
}

func (p *Periph) FFT_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(FFT_CLK_EN)}}
}

func (p *Periph) GPIO_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(GPIO_CLK_EN)}}
}

func (p *Periph) SPI0_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(SPI0_CLK_EN)}}
}

func (p *Periph) SPI1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(SPI1_CLK_EN)}}
}

func (p *Periph) SPI2_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(SPI2_CLK_EN)}}
}

func (p *Periph) SPI3_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(SPI3_CLK_EN)}}
}

func (p *Periph) I2S0_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2S0_CLK_EN)}}
}

func (p *Periph) I2S1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2S1_CLK_EN)}}
}

func (p *Periph) I2S2_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2S2_CLK_EN)}}
}

func (p *Periph) I2C0_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2C0_CLK_EN)}}
}

func (p *Periph) I2C1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2C1_CLK_EN)}}
}

func (p *Periph) I2C2_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(I2C2_CLK_EN)}}
}

func (p *Periph) UART1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(UART1_CLK_EN)}}
}

func (p *Periph) UART2_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(UART2_CLK_EN)}}
}

func (p *Periph) UART3_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(UART3_CLK_EN)}}
}

func (p *Periph) AES_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(AES_CLK_EN)}}
}

func (p *Periph) FPIOA_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(FPIOA_CLK_EN)}}
}

func (p *Periph) TIMER0_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(TIMER0_CLK_EN)}}
}

func (p *Periph) TIMER1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(TIMER1_CLK_EN)}}
}

func (p *Periph) TIMER2_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(TIMER2_CLK_EN)}}
}

func (p *Periph) WDT0_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(WDT0_CLK_EN)}}
}

func (p *Periph) WDT1_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(WDT1_CLK_EN)}}
}

func (p *Periph) SHA_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(SHA_CLK_EN)}}
}

func (p *Periph) OTP_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(OTP_CLK_EN)}}
}

func (p *Periph) RTC_CLK_EN() RMCLK_EN_PERI {
	return RMCLK_EN_PERI{mmio.UM32{&p.CLK_EN_PERI.U32, uint32(RTC_CLK_EN)}}
}

type SOFT_RESET uint32

type RSOFT_RESET struct{ mmio.U32 }

func (r *RSOFT_RESET) LoadBits(mask SOFT_RESET) SOFT_RESET {
	return SOFT_RESET(r.U32.LoadBits(uint32(mask)))
}
func (r *RSOFT_RESET) StoreBits(mask, b SOFT_RESET) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSOFT_RESET) SetBits(mask SOFT_RESET)      { r.U32.SetBits(uint32(mask)) }
func (r *RSOFT_RESET) ClearBits(mask SOFT_RESET)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSOFT_RESET) Load() SOFT_RESET             { return SOFT_RESET(r.U32.Load()) }
func (r *RSOFT_RESET) Store(b SOFT_RESET)           { r.U32.Store(uint32(b)) }

type RMSOFT_RESET struct{ mmio.UM32 }

func (rm RMSOFT_RESET) Load() SOFT_RESET   { return SOFT_RESET(rm.UM32.Load()) }
func (rm RMSOFT_RESET) Store(b SOFT_RESET) { rm.UM32.Store(uint32(b)) }

type PERI_RESET uint32

type RPERI_RESET struct{ mmio.U32 }

func (r *RPERI_RESET) LoadBits(mask PERI_RESET) PERI_RESET {
	return PERI_RESET(r.U32.LoadBits(uint32(mask)))
}
func (r *RPERI_RESET) StoreBits(mask, b PERI_RESET) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPERI_RESET) SetBits(mask PERI_RESET)      { r.U32.SetBits(uint32(mask)) }
func (r *RPERI_RESET) ClearBits(mask PERI_RESET)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPERI_RESET) Load() PERI_RESET             { return PERI_RESET(r.U32.Load()) }
func (r *RPERI_RESET) Store(b PERI_RESET)           { r.U32.Store(uint32(b)) }

type RMPERI_RESET struct{ mmio.UM32 }

func (rm RMPERI_RESET) Load() PERI_RESET   { return PERI_RESET(rm.UM32.Load()) }
func (rm RMPERI_RESET) Store(b PERI_RESET) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ROM_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(ROM_RESET)}}
}

func (p *Periph) DMA_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(DMA_RESET)}}
}

func (p *Periph) AI_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(AI_RESET)}}
}

func (p *Periph) DVP_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(DVP_RESET)}}
}

func (p *Periph) FFT_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(FFT_RESET)}}
}

func (p *Periph) GPIO_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(GPIO_RESET)}}
}

func (p *Periph) SPI0_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(SPI0_RESET)}}
}

func (p *Periph) SPI1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(SPI1_RESET)}}
}

func (p *Periph) SPI2_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(SPI2_RESET)}}
}

func (p *Periph) SPI3_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(SPI3_RESET)}}
}

func (p *Periph) I2S0_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2S0_RESET)}}
}

func (p *Periph) I2S1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2S1_RESET)}}
}

func (p *Periph) I2S2_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2S2_RESET)}}
}

func (p *Periph) I2C0_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2C0_RESET)}}
}

func (p *Periph) I2C1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2C1_RESET)}}
}

func (p *Periph) I2C2_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(I2C2_RESET)}}
}

func (p *Periph) UART1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(UART1_RESET)}}
}

func (p *Periph) UART2_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(UART2_RESET)}}
}

func (p *Periph) UART3_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(UART3_RESET)}}
}

func (p *Periph) AES_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(AES_RESET)}}
}

func (p *Periph) FPIOA_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(FPIOA_RESET)}}
}

func (p *Periph) TIMER0_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(TIMER0_RESET)}}
}

func (p *Periph) TIMER1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(TIMER1_RESET)}}
}

func (p *Periph) TIMER2_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(TIMER2_RESET)}}
}

func (p *Periph) WDT0_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(WDT0_RESET)}}
}

func (p *Periph) WDT1_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(WDT1_RESET)}}
}

func (p *Periph) SHA_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(SHA_RESET)}}
}

func (p *Periph) RTC_RESET() RMPERI_RESET {
	return RMPERI_RESET{mmio.UM32{&p.PERI_RESET.U32, uint32(RTC_RESET)}}
}

type CLK_TH0 uint32

type RCLK_TH0 struct{ mmio.U32 }

func (r *RCLK_TH0) LoadBits(mask CLK_TH0) CLK_TH0 { return CLK_TH0(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH0) StoreBits(mask, b CLK_TH0)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH0) SetBits(mask CLK_TH0)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH0) ClearBits(mask CLK_TH0)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH0) Load() CLK_TH0                 { return CLK_TH0(r.U32.Load()) }
func (r *RCLK_TH0) Store(b CLK_TH0)               { r.U32.Store(uint32(b)) }

type RMCLK_TH0 struct{ mmio.UM32 }

func (rm RMCLK_TH0) Load() CLK_TH0   { return CLK_TH0(rm.UM32.Load()) }
func (rm RMCLK_TH0) Store(b CLK_TH0) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SRAM0_GCLK() RMCLK_TH0 {
	return RMCLK_TH0{mmio.UM32{&p.CLK_TH0.U32, uint32(SRAM0_GCLK)}}
}

func (p *Periph) SRAM1_GCLK() RMCLK_TH0 {
	return RMCLK_TH0{mmio.UM32{&p.CLK_TH0.U32, uint32(SRAM1_GCLK)}}
}

func (p *Periph) AI_GCLK() RMCLK_TH0 {
	return RMCLK_TH0{mmio.UM32{&p.CLK_TH0.U32, uint32(AI_GCLK)}}
}

func (p *Periph) DVP_GCLK() RMCLK_TH0 {
	return RMCLK_TH0{mmio.UM32{&p.CLK_TH0.U32, uint32(DVP_GCLK)}}
}

func (p *Periph) ROM_GCLK() RMCLK_TH0 {
	return RMCLK_TH0{mmio.UM32{&p.CLK_TH0.U32, uint32(ROM_GCLK)}}
}

type CLK_TH1 uint32

type RCLK_TH1 struct{ mmio.U32 }

func (r *RCLK_TH1) LoadBits(mask CLK_TH1) CLK_TH1 { return CLK_TH1(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH1) StoreBits(mask, b CLK_TH1)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH1) SetBits(mask CLK_TH1)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH1) ClearBits(mask CLK_TH1)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH1) Load() CLK_TH1                 { return CLK_TH1(r.U32.Load()) }
func (r *RCLK_TH1) Store(b CLK_TH1)               { r.U32.Store(uint32(b)) }

type RMCLK_TH1 struct{ mmio.UM32 }

func (rm RMCLK_TH1) Load() CLK_TH1   { return CLK_TH1(rm.UM32.Load()) }
func (rm RMCLK_TH1) Store(b CLK_TH1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SPI0_CLK() RMCLK_TH1 {
	return RMCLK_TH1{mmio.UM32{&p.CLK_TH1.U32, uint32(SPI0_CLK)}}
}

func (p *Periph) SPI1_CLK() RMCLK_TH1 {
	return RMCLK_TH1{mmio.UM32{&p.CLK_TH1.U32, uint32(SPI1_CLK)}}
}

func (p *Periph) SPI2_CLK() RMCLK_TH1 {
	return RMCLK_TH1{mmio.UM32{&p.CLK_TH1.U32, uint32(SPI2_CLK)}}
}

func (p *Periph) SPI3_CLK() RMCLK_TH1 {
	return RMCLK_TH1{mmio.UM32{&p.CLK_TH1.U32, uint32(SPI3_CLK)}}
}

type CLK_TH2 uint32

type RCLK_TH2 struct{ mmio.U32 }

func (r *RCLK_TH2) LoadBits(mask CLK_TH2) CLK_TH2 { return CLK_TH2(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH2) StoreBits(mask, b CLK_TH2)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH2) SetBits(mask CLK_TH2)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH2) ClearBits(mask CLK_TH2)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH2) Load() CLK_TH2                 { return CLK_TH2(r.U32.Load()) }
func (r *RCLK_TH2) Store(b CLK_TH2)               { r.U32.Store(uint32(b)) }

type RMCLK_TH2 struct{ mmio.UM32 }

func (rm RMCLK_TH2) Load() CLK_TH2   { return CLK_TH2(rm.UM32.Load()) }
func (rm RMCLK_TH2) Store(b CLK_TH2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIMER0_CLK() RMCLK_TH2 {
	return RMCLK_TH2{mmio.UM32{&p.CLK_TH2.U32, uint32(TIMER0_CLK)}}
}

func (p *Periph) TIMER1_CLK() RMCLK_TH2 {
	return RMCLK_TH2{mmio.UM32{&p.CLK_TH2.U32, uint32(TIMER1_CLK)}}
}

func (p *Periph) TIMER2_CLK() RMCLK_TH2 {
	return RMCLK_TH2{mmio.UM32{&p.CLK_TH2.U32, uint32(TIMER2_CLK)}}
}

type CLK_TH3 uint32

type RCLK_TH3 struct{ mmio.U32 }

func (r *RCLK_TH3) LoadBits(mask CLK_TH3) CLK_TH3 { return CLK_TH3(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH3) StoreBits(mask, b CLK_TH3)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH3) SetBits(mask CLK_TH3)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH3) ClearBits(mask CLK_TH3)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH3) Load() CLK_TH3                 { return CLK_TH3(r.U32.Load()) }
func (r *RCLK_TH3) Store(b CLK_TH3)               { r.U32.Store(uint32(b)) }

type RMCLK_TH3 struct{ mmio.UM32 }

func (rm RMCLK_TH3) Load() CLK_TH3   { return CLK_TH3(rm.UM32.Load()) }
func (rm RMCLK_TH3) Store(b CLK_TH3) { rm.UM32.Store(uint32(b)) }

func (p *Periph) I2S0_CLK() RMCLK_TH3 {
	return RMCLK_TH3{mmio.UM32{&p.CLK_TH3.U32, uint32(I2S0_CLK)}}
}

func (p *Periph) I2S1_CLK() RMCLK_TH3 {
	return RMCLK_TH3{mmio.UM32{&p.CLK_TH3.U32, uint32(I2S1_CLK)}}
}

type CLK_TH4 uint32

type RCLK_TH4 struct{ mmio.U32 }

func (r *RCLK_TH4) LoadBits(mask CLK_TH4) CLK_TH4 { return CLK_TH4(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH4) StoreBits(mask, b CLK_TH4)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH4) SetBits(mask CLK_TH4)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH4) ClearBits(mask CLK_TH4)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH4) Load() CLK_TH4                 { return CLK_TH4(r.U32.Load()) }
func (r *RCLK_TH4) Store(b CLK_TH4)               { r.U32.Store(uint32(b)) }

type RMCLK_TH4 struct{ mmio.UM32 }

func (rm RMCLK_TH4) Load() CLK_TH4   { return CLK_TH4(rm.UM32.Load()) }
func (rm RMCLK_TH4) Store(b CLK_TH4) { rm.UM32.Store(uint32(b)) }

func (p *Periph) I2S2_CLK() RMCLK_TH4 {
	return RMCLK_TH4{mmio.UM32{&p.CLK_TH4.U32, uint32(I2S2_CLK)}}
}

func (p *Periph) I2S0_MCLK() RMCLK_TH4 {
	return RMCLK_TH4{mmio.UM32{&p.CLK_TH4.U32, uint32(I2S0_MCLK)}}
}

func (p *Periph) I2S1_MCLK() RMCLK_TH4 {
	return RMCLK_TH4{mmio.UM32{&p.CLK_TH4.U32, uint32(I2S1_MCLK)}}
}

type CLK_TH5 uint32

type RCLK_TH5 struct{ mmio.U32 }

func (r *RCLK_TH5) LoadBits(mask CLK_TH5) CLK_TH5 { return CLK_TH5(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH5) StoreBits(mask, b CLK_TH5)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH5) SetBits(mask CLK_TH5)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH5) ClearBits(mask CLK_TH5)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH5) Load() CLK_TH5                 { return CLK_TH5(r.U32.Load()) }
func (r *RCLK_TH5) Store(b CLK_TH5)               { r.U32.Store(uint32(b)) }

type RMCLK_TH5 struct{ mmio.UM32 }

func (rm RMCLK_TH5) Load() CLK_TH5   { return CLK_TH5(rm.UM32.Load()) }
func (rm RMCLK_TH5) Store(b CLK_TH5) { rm.UM32.Store(uint32(b)) }

func (p *Periph) I2S2_MCLK() RMCLK_TH5 {
	return RMCLK_TH5{mmio.UM32{&p.CLK_TH5.U32, uint32(I2S2_MCLK)}}
}

func (p *Periph) I2C0_CLK() RMCLK_TH5 {
	return RMCLK_TH5{mmio.UM32{&p.CLK_TH5.U32, uint32(I2C0_CLK)}}
}

func (p *Periph) I2C1_CLK() RMCLK_TH5 {
	return RMCLK_TH5{mmio.UM32{&p.CLK_TH5.U32, uint32(I2C1_CLK)}}
}

func (p *Periph) I2C2_CLK() RMCLK_TH5 {
	return RMCLK_TH5{mmio.UM32{&p.CLK_TH5.U32, uint32(I2C2_CLK)}}
}

type CLK_TH6 uint32

type RCLK_TH6 struct{ mmio.U32 }

func (r *RCLK_TH6) LoadBits(mask CLK_TH6) CLK_TH6 { return CLK_TH6(r.U32.LoadBits(uint32(mask))) }
func (r *RCLK_TH6) StoreBits(mask, b CLK_TH6)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLK_TH6) SetBits(mask CLK_TH6)          { r.U32.SetBits(uint32(mask)) }
func (r *RCLK_TH6) ClearBits(mask CLK_TH6)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCLK_TH6) Load() CLK_TH6                 { return CLK_TH6(r.U32.Load()) }
func (r *RCLK_TH6) Store(b CLK_TH6)               { r.U32.Store(uint32(b)) }

type RMCLK_TH6 struct{ mmio.UM32 }

func (rm RMCLK_TH6) Load() CLK_TH6   { return CLK_TH6(rm.UM32.Load()) }
func (rm RMCLK_TH6) Store(b CLK_TH6) { rm.UM32.Store(uint32(b)) }

func (p *Periph) WDT0_CLK() RMCLK_TH6 {
	return RMCLK_TH6{mmio.UM32{&p.CLK_TH6.U32, uint32(WDT0_CLK)}}
}

func (p *Periph) WDT1_CLK() RMCLK_TH6 {
	return RMCLK_TH6{mmio.UM32{&p.CLK_TH6.U32, uint32(WDT1_CLK)}}
}

type MISC uint32

type RMISC struct{ mmio.U32 }

func (r *RMISC) LoadBits(mask MISC) MISC { return MISC(r.U32.LoadBits(uint32(mask))) }
func (r *RMISC) StoreBits(mask, b MISC)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMISC) SetBits(mask MISC)       { r.U32.SetBits(uint32(mask)) }
func (r *RMISC) ClearBits(mask MISC)     { r.U32.ClearBits(uint32(mask)) }
func (r *RMISC) Load() MISC              { return MISC(r.U32.Load()) }
func (r *RMISC) Store(b MISC)            { r.U32.Store(uint32(b)) }

type RMMISC struct{ mmio.UM32 }

func (rm RMMISC) Load() MISC   { return MISC(rm.UM32.Load()) }
func (rm RMMISC) Store(b MISC) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DEBUG_SEL() RMMISC {
	return RMMISC{mmio.UM32{&p.MISC.U32, uint32(DEBUG_SEL)}}
}

func (p *Periph) SPI_DVP_DATA_ENABLE() RMMISC {
	return RMMISC{mmio.UM32{&p.MISC.U32, uint32(SPI_DVP_DATA_ENABLE)}}
}

type PERI uint32

type RPERI struct{ mmio.U32 }

func (r *RPERI) LoadBits(mask PERI) PERI { return PERI(r.U32.LoadBits(uint32(mask))) }
func (r *RPERI) StoreBits(mask, b PERI)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPERI) SetBits(mask PERI)       { r.U32.SetBits(uint32(mask)) }
func (r *RPERI) ClearBits(mask PERI)     { r.U32.ClearBits(uint32(mask)) }
func (r *RPERI) Load() PERI              { return PERI(r.U32.Load()) }
func (r *RPERI) Store(b PERI)            { r.U32.Store(uint32(b)) }

type RMPERI struct{ mmio.UM32 }

func (rm RMPERI) Load() PERI   { return PERI(rm.UM32.Load()) }
func (rm RMPERI) Store(b PERI) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIMER0_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER0_PAUSE)}}
}

func (p *Periph) TIMER1_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER1_PAUSE)}}
}

func (p *Periph) TIMER2_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER2_PAUSE)}}
}

func (p *Periph) TIMER3_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER3_PAUSE)}}
}

func (p *Periph) TIMER4_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER4_PAUSE)}}
}

func (p *Periph) TIMER5_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER5_PAUSE)}}
}

func (p *Periph) TIMER6_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER6_PAUSE)}}
}

func (p *Periph) TIMER7_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER7_PAUSE)}}
}

func (p *Periph) TIMER8_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER8_PAUSE)}}
}

func (p *Periph) TIMER9_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER9_PAUSE)}}
}

func (p *Periph) TIMER10_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER10_PAUSE)}}
}

func (p *Periph) TIMER11_PAUSE() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(TIMER11_PAUSE)}}
}

func (p *Periph) SPI0_XIP_EN() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI0_XIP_EN)}}
}

func (p *Periph) SPI1_XIP_EN() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI1_XIP_EN)}}
}

func (p *Periph) SPI2_XIP_EN() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI2_XIP_EN)}}
}

func (p *Periph) SPI3_XIP_EN() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI3_XIP_EN)}}
}

func (p *Periph) SPI0_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI0_CLK_BYPASS)}}
}

func (p *Periph) SPI1_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI1_CLK_BYPASS)}}
}

func (p *Periph) SPI2_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(SPI2_CLK_BYPASS)}}
}

func (p *Periph) I2S0_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(I2S0_CLK_BYPASS)}}
}

func (p *Periph) I2S1_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(I2S1_CLK_BYPASS)}}
}

func (p *Periph) I2S2_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(I2S2_CLK_BYPASS)}}
}

func (p *Periph) JTAG_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(JTAG_CLK_BYPASS)}}
}

func (p *Periph) DVP_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(DVP_CLK_BYPASS)}}
}

func (p *Periph) DEBUG_CLK_BYPASS() RMPERI {
	return RMPERI{mmio.UM32{&p.PERI.U32, uint32(DEBUG_CLK_BYPASS)}}
}

type SPI_SLEEP uint32

type RSPI_SLEEP struct{ mmio.U32 }

func (r *RSPI_SLEEP) LoadBits(mask SPI_SLEEP) SPI_SLEEP {
	return SPI_SLEEP(r.U32.LoadBits(uint32(mask)))
}
func (r *RSPI_SLEEP) StoreBits(mask, b SPI_SLEEP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSPI_SLEEP) SetBits(mask SPI_SLEEP)      { r.U32.SetBits(uint32(mask)) }
func (r *RSPI_SLEEP) ClearBits(mask SPI_SLEEP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSPI_SLEEP) Load() SPI_SLEEP             { return SPI_SLEEP(r.U32.Load()) }
func (r *RSPI_SLEEP) Store(b SPI_SLEEP)           { r.U32.Store(uint32(b)) }

type RMSPI_SLEEP struct{ mmio.UM32 }

func (rm RMSPI_SLEEP) Load() SPI_SLEEP   { return SPI_SLEEP(rm.UM32.Load()) }
func (rm RMSPI_SLEEP) Store(b SPI_SLEEP) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SSI0_SLEEP() RMSPI_SLEEP {
	return RMSPI_SLEEP{mmio.UM32{&p.SPI_SLEEP.U32, uint32(SSI0_SLEEP)}}
}

func (p *Periph) SSI1_SLEEP() RMSPI_SLEEP {
	return RMSPI_SLEEP{mmio.UM32{&p.SPI_SLEEP.U32, uint32(SSI1_SLEEP)}}
}

func (p *Periph) SSI2_SLEEP() RMSPI_SLEEP {
	return RMSPI_SLEEP{mmio.UM32{&p.SPI_SLEEP.U32, uint32(SSI2_SLEEP)}}
}

func (p *Periph) SSI3_SLEEP() RMSPI_SLEEP {
	return RMSPI_SLEEP{mmio.UM32{&p.SPI_SLEEP.U32, uint32(SSI3_SLEEP)}}
}

type RESET_STATUS uint32

type RRESET_STATUS struct{ mmio.U32 }

func (r *RRESET_STATUS) LoadBits(mask RESET_STATUS) RESET_STATUS {
	return RESET_STATUS(r.U32.LoadBits(uint32(mask)))
}
func (r *RRESET_STATUS) StoreBits(mask, b RESET_STATUS) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRESET_STATUS) SetBits(mask RESET_STATUS)      { r.U32.SetBits(uint32(mask)) }
func (r *RRESET_STATUS) ClearBits(mask RESET_STATUS)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRESET_STATUS) Load() RESET_STATUS             { return RESET_STATUS(r.U32.Load()) }
func (r *RRESET_STATUS) Store(b RESET_STATUS)           { r.U32.Store(uint32(b)) }

type RMRESET_STATUS struct{ mmio.UM32 }

func (rm RMRESET_STATUS) Load() RESET_STATUS   { return RESET_STATUS(rm.UM32.Load()) }
func (rm RMRESET_STATUS) Store(b RESET_STATUS) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RESET_STS_CLR() RMRESET_STATUS {
	return RMRESET_STATUS{mmio.UM32{&p.RESET_STATUS.U32, uint32(RESET_STS_CLR)}}
}

func (p *Periph) PIN_RESET_STS() RMRESET_STATUS {
	return RMRESET_STATUS{mmio.UM32{&p.RESET_STATUS.U32, uint32(PIN_RESET_STS)}}
}

func (p *Periph) WDT0_RESET_STS() RMRESET_STATUS {
	return RMRESET_STATUS{mmio.UM32{&p.RESET_STATUS.U32, uint32(WDT0_RESET_STS)}}
}

func (p *Periph) WDT1_RESET_STS() RMRESET_STATUS {
	return RMRESET_STATUS{mmio.UM32{&p.RESET_STATUS.U32, uint32(WDT1_RESET_STS)}}
}

func (p *Periph) SOFT_RESET_STS() RMRESET_STATUS {
	return RMRESET_STATUS{mmio.UM32{&p.RESET_STATUS.U32, uint32(SOFT_RESET_STS)}}
}

type DMA_SEL0 uint32

type RDMA_SEL0 struct{ mmio.U32 }

func (r *RDMA_SEL0) LoadBits(mask DMA_SEL0) DMA_SEL0 { return DMA_SEL0(r.U32.LoadBits(uint32(mask))) }
func (r *RDMA_SEL0) StoreBits(mask, b DMA_SEL0)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDMA_SEL0) SetBits(mask DMA_SEL0)           { r.U32.SetBits(uint32(mask)) }
func (r *RDMA_SEL0) ClearBits(mask DMA_SEL0)         { r.U32.ClearBits(uint32(mask)) }
func (r *RDMA_SEL0) Load() DMA_SEL0                  { return DMA_SEL0(r.U32.Load()) }
func (r *RDMA_SEL0) Store(b DMA_SEL0)                { r.U32.Store(uint32(b)) }

type RMDMA_SEL0 struct{ mmio.UM32 }

func (rm RMDMA_SEL0) Load() DMA_SEL0   { return DMA_SEL0(rm.UM32.Load()) }
func (rm RMDMA_SEL0) Store(b DMA_SEL0) { rm.UM32.Store(uint32(b)) }

type DMA_SEL1 uint32

type RDMA_SEL1 struct{ mmio.U32 }

func (r *RDMA_SEL1) LoadBits(mask DMA_SEL1) DMA_SEL1 { return DMA_SEL1(r.U32.LoadBits(uint32(mask))) }
func (r *RDMA_SEL1) StoreBits(mask, b DMA_SEL1)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDMA_SEL1) SetBits(mask DMA_SEL1)           { r.U32.SetBits(uint32(mask)) }
func (r *RDMA_SEL1) ClearBits(mask DMA_SEL1)         { r.U32.ClearBits(uint32(mask)) }
func (r *RDMA_SEL1) Load() DMA_SEL1                  { return DMA_SEL1(r.U32.Load()) }
func (r *RDMA_SEL1) Store(b DMA_SEL1)                { r.U32.Store(uint32(b)) }

type RMDMA_SEL1 struct{ mmio.UM32 }

func (rm RMDMA_SEL1) Load() DMA_SEL1   { return DMA_SEL1(rm.UM32.Load()) }
func (rm RMDMA_SEL1) Store(b DMA_SEL1) { rm.UM32.Store(uint32(b)) }

type POWER_SEL uint32

type RPOWER_SEL struct{ mmio.U32 }

func (r *RPOWER_SEL) LoadBits(mask POWER_SEL) POWER_SEL {
	return POWER_SEL(r.U32.LoadBits(uint32(mask)))
}
func (r *RPOWER_SEL) StoreBits(mask, b POWER_SEL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPOWER_SEL) SetBits(mask POWER_SEL)      { r.U32.SetBits(uint32(mask)) }
func (r *RPOWER_SEL) ClearBits(mask POWER_SEL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPOWER_SEL) Load() POWER_SEL             { return POWER_SEL(r.U32.Load()) }
func (r *RPOWER_SEL) Store(b POWER_SEL)           { r.U32.Store(uint32(b)) }

type RMPOWER_SEL struct{ mmio.UM32 }

func (rm RMPOWER_SEL) Load() POWER_SEL   { return POWER_SEL(rm.UM32.Load()) }
func (rm RMPOWER_SEL) Store(b POWER_SEL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) POWER_MODE_SEL0() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL0)}}
}

func (p *Periph) POWER_MODE_SEL1() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL1)}}
}

func (p *Periph) POWER_MODE_SEL2() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL2)}}
}

func (p *Periph) POWER_MODE_SEL3() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL3)}}
}

func (p *Periph) POWER_MODE_SEL4() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL4)}}
}

func (p *Periph) POWER_MODE_SEL5() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL5)}}
}

func (p *Periph) POWER_MODE_SEL6() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL6)}}
}

func (p *Periph) POWER_MODE_SEL7() RMPOWER_SEL {
	return RMPOWER_SEL{mmio.UM32{&p.POWER_SEL.U32, uint32(POWER_MODE_SEL7)}}
}
