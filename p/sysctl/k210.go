// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build k210

// Package sysctl provides access to the registers of the SYSCTL peripheral.
//
// Instances:
//  SYSCTL  SYSCTL_BASE  -  -  System Controller
// Registers:
//  0x000 32  GIT_ID        Git short commit id
//  0x004 32  CLK_FREQ      System clock base frequency
//  0x008 32  PLL[3]        PLL controllers
//  0x018 32  PLL_LOCK      PLL lock tester
//  0x01C 32  ROM_ERROR     AXI ROM detector
//  0x020 32  CLK_SEL0      Clock select controller 0
//  0x024 32  CLK_SEL1      Clock select controller 1
//  0x028 32  CLK_EN_CENT   Central clock enable
//  0x02C 32  CLK_EN_PERI   Peripheral clock enable
//  0x030 32  SOFT_RESET    Soft reset ctrl
//  0x034 32  PERI_RESET    Peripheral reset controller
//  0x038 32  CLK_TH0       Clock threshold controller 0
//  0x03C 32  CLK_TH1       Clock threshold controller 1
//  0x040 32  CLK_TH2       Clock threshold controller 2
//  0x044 32  CLK_TH3       Clock threshold controller 3
//  0x048 32  CLK_TH4       Clock threshold controller 4
//  0x04C 32  CLK_TH5       Clock threshold controller 5
//  0x050 32  CLK_TH6       Clock threshold controller 6
//  0x054 32  MISC          Miscellaneous controller
//  0x058 32  PERI          Peripheral controller
//  0x05C 32  SPI_SLEEP     SPI sleep controller
//  0x060 32  RESET_STATUS  Reset source status
//  0x064 32  DMA_SEL0      DMA handshake selector
//  0x068 32  DMA_SEL1      DMA handshake selector
//  0x06C 32  POWER_SEL     IO Power Mode Select controller
// Import:
//  github.com/embeddedgo/kendryte/p/mmap
package sysctl

const (
	CLKR             PLL = 0x0F << 0  //+
	CLKF             PLL = 0x3F << 4  //+
	CLKOD            PLL = 0x0F << 10 //+
	BWADJ            PLL = 0x3F << 14 //+
	RESET            PLL = 0x01 << 20 //+
	PWRD             PLL = 0x01 << 21 //+
	INTFB            PLL = 0x01 << 22 //+
	BYPASS           PLL = 0x01 << 23 //+
	TEST             PLL = 0x01 << 24 //+
	OUT_EN           PLL = 0x01 << 25 //+
	TEST_EN_CKIN_SEL PLL = 0x03 << 26 //+
)

const (
	CLKRn             = 0
	CLKFn             = 4
	CLKODn            = 10
	BWADJn            = 14
	RESETn            = 20
	PWRDn             = 21
	INTFBn            = 22
	BYPASSn           = 23
	TESTn             = 24
	OUT_ENn           = 25
	TEST_EN_CKIN_SELn = 26
)

const (
	PLL_LOCK0       PLL_LOCK = 0x03 << 0  //+
	PLL_SLIP_CLEAR0 PLL_LOCK = 0x01 << 2  //+
	TEST_CLK_OUT0   PLL_LOCK = 0x01 << 3  //+
	PLL_LOCK1       PLL_LOCK = 0x03 << 8  //+
	PLL_SLIP_CLEAR1 PLL_LOCK = 0x01 << 10 //+
	TEST_CLK_OUT1   PLL_LOCK = 0x01 << 11 //+
	PLL_LOCK2       PLL_LOCK = 0x03 << 16 //+
	PLL_SLIP_CLEAR2 PLL_LOCK = 0x01 << 18 //+
	TEST_CLK_OUT2   PLL_LOCK = 0x01 << 19 //+
)

const (
	PLL_LOCK0n       = 0
	PLL_SLIP_CLEAR0n = 2
	TEST_CLK_OUT0n   = 3
	PLL_LOCK1n       = 8
	PLL_SLIP_CLEAR1n = 10
	TEST_CLK_OUT1n   = 11
	PLL_LOCK2n       = 16
	PLL_SLIP_CLEAR2n = 18
	TEST_CLK_OUT2n   = 19
)

const (
	ROM_MUL_ERROR ROM_ERROR = 0x01 << 0 //+
	ROM_ONE_ERROR ROM_ERROR = 0x01 << 1 //+
)

const (
	ROM_MUL_ERRORn = 0
	ROM_ONE_ERRORn = 1
)

const (
	ACLK_SEL         CLK_SEL0 = 0x01 << 0  //+
	ACLK_DIVIDER_SEL CLK_SEL0 = 0x03 << 1  //+
	APB0_CLK_SEL     CLK_SEL0 = 0x07 << 3  //+
	APB1_CLK_SEL     CLK_SEL0 = 0x07 << 6  //+
	APB2_CLK_SEL     CLK_SEL0 = 0x07 << 9  //+
	SPI3_CLK_SEL     CLK_SEL0 = 0x01 << 12 //+
	TIMER0_CLK_SEL   CLK_SEL0 = 0x01 << 13 //+
	TIMER1_CLK_SEL   CLK_SEL0 = 0x01 << 14 //+
	TIMER2_CLK_SEL   CLK_SEL0 = 0x01 << 15 //+
)

const (
	ACLK_SELn         = 0
	ACLK_DIVIDER_SELn = 1
	APB0_CLK_SELn     = 3
	APB1_CLK_SELn     = 6
	APB2_CLK_SELn     = 9
	SPI3_CLK_SELn     = 12
	TIMER0_CLK_SELn   = 13
	TIMER1_CLK_SELn   = 14
	TIMER2_CLK_SELn   = 15
)

const (
	SPI3_SAMPLE_CLK_SEL CLK_SEL1 = 0x01 << 0 //+
)

const (
	SPI3_SAMPLE_CLK_SELn = 0
)

const (
	CPU_CLK_EN   CLK_EN_CENT = 0x01 << 0 //+
	SRAM0_CLK_EN CLK_EN_CENT = 0x01 << 1 //+
	SRAM1_CLK_EN CLK_EN_CENT = 0x01 << 2 //+
	APB0_CLK_EN  CLK_EN_CENT = 0x01 << 3 //+
	APB1_CLK_EN  CLK_EN_CENT = 0x01 << 4 //+
	APB2_CLK_EN  CLK_EN_CENT = 0x01 << 5 //+
)

const (
	CPU_CLK_ENn   = 0
	SRAM0_CLK_ENn = 1
	SRAM1_CLK_ENn = 2
	APB0_CLK_ENn  = 3
	APB1_CLK_ENn  = 4
	APB2_CLK_ENn  = 5
)

const (
	ROM_CLK_EN    CLK_EN_PERI = 0x01 << 0  //+
	DMA_CLK_EN    CLK_EN_PERI = 0x01 << 1  //+
	AI_CLK_EN     CLK_EN_PERI = 0x01 << 2  //+
	DVP_CLK_EN    CLK_EN_PERI = 0x01 << 3  //+
	FFT_CLK_EN    CLK_EN_PERI = 0x01 << 4  //+
	GPIO_CLK_EN   CLK_EN_PERI = 0x01 << 5  //+
	SPI0_CLK_EN   CLK_EN_PERI = 0x01 << 6  //+
	SPI1_CLK_EN   CLK_EN_PERI = 0x01 << 7  //+
	SPI2_CLK_EN   CLK_EN_PERI = 0x01 << 8  //+
	SPI3_CLK_EN   CLK_EN_PERI = 0x01 << 9  //+
	I2S0_CLK_EN   CLK_EN_PERI = 0x01 << 10 //+
	I2S1_CLK_EN   CLK_EN_PERI = 0x01 << 11 //+
	I2S2_CLK_EN   CLK_EN_PERI = 0x01 << 12 //+
	I2C0_CLK_EN   CLK_EN_PERI = 0x01 << 13 //+
	I2C1_CLK_EN   CLK_EN_PERI = 0x01 << 14 //+
	I2C2_CLK_EN   CLK_EN_PERI = 0x01 << 15 //+
	UART1_CLK_EN  CLK_EN_PERI = 0x01 << 16 //+
	UART2_CLK_EN  CLK_EN_PERI = 0x01 << 17 //+
	UART3_CLK_EN  CLK_EN_PERI = 0x01 << 18 //+
	AES_CLK_EN    CLK_EN_PERI = 0x01 << 19 //+
	FPIOA_CLK_EN  CLK_EN_PERI = 0x01 << 20 //+
	TIMER0_CLK_EN CLK_EN_PERI = 0x01 << 21 //+
	TIMER1_CLK_EN CLK_EN_PERI = 0x01 << 22 //+
	TIMER2_CLK_EN CLK_EN_PERI = 0x01 << 23 //+
	WDT0_CLK_EN   CLK_EN_PERI = 0x01 << 24 //+
	WDT1_CLK_EN   CLK_EN_PERI = 0x01 << 25 //+
	SHA_CLK_EN    CLK_EN_PERI = 0x01 << 26 //+
	OTP_CLK_EN    CLK_EN_PERI = 0x01 << 27 //+
	RTC_CLK_EN    CLK_EN_PERI = 0x01 << 29 //+
)

const (
	ROM_CLK_ENn    = 0
	DMA_CLK_ENn    = 1
	AI_CLK_ENn     = 2
	DVP_CLK_ENn    = 3
	FFT_CLK_ENn    = 4
	GPIO_CLK_ENn   = 5
	SPI0_CLK_ENn   = 6
	SPI1_CLK_ENn   = 7
	SPI2_CLK_ENn   = 8
	SPI3_CLK_ENn   = 9
	I2S0_CLK_ENn   = 10
	I2S1_CLK_ENn   = 11
	I2S2_CLK_ENn   = 12
	I2C0_CLK_ENn   = 13
	I2C1_CLK_ENn   = 14
	I2C2_CLK_ENn   = 15
	UART1_CLK_ENn  = 16
	UART2_CLK_ENn  = 17
	UART3_CLK_ENn  = 18
	AES_CLK_ENn    = 19
	FPIOA_CLK_ENn  = 20
	TIMER0_CLK_ENn = 21
	TIMER1_CLK_ENn = 22
	TIMER2_CLK_ENn = 23
	WDT0_CLK_ENn   = 24
	WDT1_CLK_ENn   = 25
	SHA_CLK_ENn    = 26
	OTP_CLK_ENn    = 27
	RTC_CLK_ENn    = 29
)

const (
	ROM_RESET    PERI_RESET = 0x01 << 0  //+
	DMA_RESET    PERI_RESET = 0x01 << 1  //+
	AI_RESET     PERI_RESET = 0x01 << 2  //+
	DVP_RESET    PERI_RESET = 0x01 << 3  //+
	FFT_RESET    PERI_RESET = 0x01 << 4  //+
	GPIO_RESET   PERI_RESET = 0x01 << 5  //+
	SPI0_RESET   PERI_RESET = 0x01 << 6  //+
	SPI1_RESET   PERI_RESET = 0x01 << 7  //+
	SPI2_RESET   PERI_RESET = 0x01 << 8  //+
	SPI3_RESET   PERI_RESET = 0x01 << 9  //+
	I2S0_RESET   PERI_RESET = 0x01 << 10 //+
	I2S1_RESET   PERI_RESET = 0x01 << 11 //+
	I2S2_RESET   PERI_RESET = 0x01 << 12 //+
	I2C0_RESET   PERI_RESET = 0x01 << 13 //+
	I2C1_RESET   PERI_RESET = 0x01 << 14 //+
	I2C2_RESET   PERI_RESET = 0x01 << 15 //+
	UART1_RESET  PERI_RESET = 0x01 << 16 //+
	UART2_RESET  PERI_RESET = 0x01 << 17 //+
	UART3_RESET  PERI_RESET = 0x01 << 18 //+
	AES_RESET    PERI_RESET = 0x01 << 19 //+
	FPIOA_RESET  PERI_RESET = 0x01 << 20 //+
	TIMER0_RESET PERI_RESET = 0x01 << 21 //+
	TIMER1_RESET PERI_RESET = 0x01 << 22 //+
	TIMER2_RESET PERI_RESET = 0x01 << 23 //+
	WDT0_RESET   PERI_RESET = 0x01 << 24 //+
	WDT1_RESET   PERI_RESET = 0x01 << 25 //+
	SHA_RESET    PERI_RESET = 0x01 << 26 //+
	RTC_RESET    PERI_RESET = 0x01 << 29 //+
)

const (
	ROM_RESETn    = 0
	DMA_RESETn    = 1
	AI_RESETn     = 2
	DVP_RESETn    = 3
	FFT_RESETn    = 4
	GPIO_RESETn   = 5
	SPI0_RESETn   = 6
	SPI1_RESETn   = 7
	SPI2_RESETn   = 8
	SPI3_RESETn   = 9
	I2S0_RESETn   = 10
	I2S1_RESETn   = 11
	I2S2_RESETn   = 12
	I2C0_RESETn   = 13
	I2C1_RESETn   = 14
	I2C2_RESETn   = 15
	UART1_RESETn  = 16
	UART2_RESETn  = 17
	UART3_RESETn  = 18
	AES_RESETn    = 19
	FPIOA_RESETn  = 20
	TIMER0_RESETn = 21
	TIMER1_RESETn = 22
	TIMER2_RESETn = 23
	WDT0_RESETn   = 24
	WDT1_RESETn   = 25
	SHA_RESETn    = 26
	RTC_RESETn    = 29
)

const (
	SRAM0_GCLK CLK_TH0 = 0x0F << 0  //+
	SRAM1_GCLK CLK_TH0 = 0x0F << 4  //+
	AI_GCLK    CLK_TH0 = 0x0F << 8  //+
	DVP_GCLK   CLK_TH0 = 0x0F << 12 //+
	ROM_GCLK   CLK_TH0 = 0x0F << 16 //+
)

const (
	SRAM0_GCLKn = 0
	SRAM1_GCLKn = 4
	AI_GCLKn    = 8
	DVP_GCLKn   = 12
	ROM_GCLKn   = 16
)

const (
	SPI0_CLK CLK_TH1 = 0xFF << 0  //+
	SPI1_CLK CLK_TH1 = 0xFF << 8  //+
	SPI2_CLK CLK_TH1 = 0xFF << 16 //+
	SPI3_CLK CLK_TH1 = 0xFF << 24 //+
)

const (
	SPI0_CLKn = 0
	SPI1_CLKn = 8
	SPI2_CLKn = 16
	SPI3_CLKn = 24
)

const (
	TIMER0_CLK CLK_TH2 = 0xFF << 0  //+
	TIMER1_CLK CLK_TH2 = 0xFF << 8  //+
	TIMER2_CLK CLK_TH2 = 0xFF << 16 //+
)

const (
	TIMER0_CLKn = 0
	TIMER1_CLKn = 8
	TIMER2_CLKn = 16
)

const (
	I2S0_CLK CLK_TH3 = 0xFFFF << 0  //+
	I2S1_CLK CLK_TH3 = 0xFFFF << 16 //+
)

const (
	I2S0_CLKn = 0
	I2S1_CLKn = 16
)

const (
	I2S2_CLK  CLK_TH4 = 0xFFFF << 0 //+
	I2S0_MCLK CLK_TH4 = 0xFF << 16  //+
	I2S1_MCLK CLK_TH4 = 0xFF << 24  //+
)

const (
	I2S2_CLKn  = 0
	I2S0_MCLKn = 16
	I2S1_MCLKn = 24
)

const (
	I2S2_MCLK CLK_TH5 = 0xFF << 0  //+
	I2C0_CLK  CLK_TH5 = 0xFF << 8  //+
	I2C1_CLK  CLK_TH5 = 0xFF << 16 //+
	I2C2_CLK  CLK_TH5 = 0xFF << 24 //+
)

const (
	I2S2_MCLKn = 0
	I2C0_CLKn  = 8
	I2C1_CLKn  = 16
	I2C2_CLKn  = 24
)

const (
	WDT0_CLK CLK_TH6 = 0xFF << 0 //+
	WDT1_CLK CLK_TH6 = 0xFF << 8 //+
)

const (
	WDT0_CLKn = 0
	WDT1_CLKn = 8
)

const (
	DEBUG_SEL           MISC = 0x3F << 0  //+
	SPI_DVP_DATA_ENABLE MISC = 0x01 << 10 //+
)

const (
	DEBUG_SELn           = 0
	SPI_DVP_DATA_ENABLEn = 10
)

const (
	TIMER0_PAUSE     PERI = 0x01 << 0  //+
	TIMER1_PAUSE     PERI = 0x01 << 1  //+
	TIMER2_PAUSE     PERI = 0x01 << 2  //+
	TIMER3_PAUSE     PERI = 0x01 << 3  //+
	TIMER4_PAUSE     PERI = 0x01 << 4  //+
	TIMER5_PAUSE     PERI = 0x01 << 5  //+
	TIMER6_PAUSE     PERI = 0x01 << 6  //+
	TIMER7_PAUSE     PERI = 0x01 << 7  //+
	TIMER8_PAUSE     PERI = 0x01 << 8  //+
	TIMER9_PAUSE     PERI = 0x01 << 9  //+
	TIMER10_PAUSE    PERI = 0x01 << 10 //+
	TIMER11_PAUSE    PERI = 0x01 << 11 //+
	SPI0_XIP_EN      PERI = 0x01 << 12 //+
	SPI1_XIP_EN      PERI = 0x01 << 13 //+
	SPI2_XIP_EN      PERI = 0x01 << 14 //+
	SPI3_XIP_EN      PERI = 0x01 << 15 //+
	SPI0_CLK_BYPASS  PERI = 0x01 << 16 //+
	SPI1_CLK_BYPASS  PERI = 0x01 << 17 //+
	SPI2_CLK_BYPASS  PERI = 0x01 << 18 //+
	I2S0_CLK_BYPASS  PERI = 0x01 << 19 //+
	I2S1_CLK_BYPASS  PERI = 0x01 << 20 //+
	I2S2_CLK_BYPASS  PERI = 0x01 << 21 //+
	JTAG_CLK_BYPASS  PERI = 0x01 << 22 //+
	DVP_CLK_BYPASS   PERI = 0x01 << 23 //+
	DEBUG_CLK_BYPASS PERI = 0x01 << 24 //+
)

const (
	TIMER0_PAUSEn     = 0
	TIMER1_PAUSEn     = 1
	TIMER2_PAUSEn     = 2
	TIMER3_PAUSEn     = 3
	TIMER4_PAUSEn     = 4
	TIMER5_PAUSEn     = 5
	TIMER6_PAUSEn     = 6
	TIMER7_PAUSEn     = 7
	TIMER8_PAUSEn     = 8
	TIMER9_PAUSEn     = 9
	TIMER10_PAUSEn    = 10
	TIMER11_PAUSEn    = 11
	SPI0_XIP_ENn      = 12
	SPI1_XIP_ENn      = 13
	SPI2_XIP_ENn      = 14
	SPI3_XIP_ENn      = 15
	SPI0_CLK_BYPASSn  = 16
	SPI1_CLK_BYPASSn  = 17
	SPI2_CLK_BYPASSn  = 18
	I2S0_CLK_BYPASSn  = 19
	I2S1_CLK_BYPASSn  = 20
	I2S2_CLK_BYPASSn  = 21
	JTAG_CLK_BYPASSn  = 22
	DVP_CLK_BYPASSn   = 23
	DEBUG_CLK_BYPASSn = 24
)

const (
	SSI0_SLEEP SPI_SLEEP = 0x01 << 0 //+
	SSI1_SLEEP SPI_SLEEP = 0x01 << 1 //+
	SSI2_SLEEP SPI_SLEEP = 0x01 << 2 //+
	SSI3_SLEEP SPI_SLEEP = 0x01 << 3 //+
)

const (
	SSI0_SLEEPn = 0
	SSI1_SLEEPn = 1
	SSI2_SLEEPn = 2
	SSI3_SLEEPn = 3
)

const (
	RESET_STS_CLR  RESET_STATUS = 0x01 << 0 //+
	PIN_RESET_STS  RESET_STATUS = 0x01 << 1 //+
	WDT0_RESET_STS RESET_STATUS = 0x01 << 2 //+
	WDT1_RESET_STS RESET_STATUS = 0x01 << 3 //+
	SOFT_RESET_STS RESET_STATUS = 0x01 << 4 //+
)

const (
	RESET_STS_CLRn  = 0
	PIN_RESET_STSn  = 1
	WDT0_RESET_STSn = 2
	WDT1_RESET_STSn = 3
	SOFT_RESET_STSn = 4
)

const (
	POWER_MODE_SEL0 POWER_SEL = 0x01 << 0 //+
	POWER_MODE_SEL1 POWER_SEL = 0x01 << 1 //+
	POWER_MODE_SEL2 POWER_SEL = 0x01 << 2 //+
	POWER_MODE_SEL3 POWER_SEL = 0x01 << 3 //+
	POWER_MODE_SEL4 POWER_SEL = 0x01 << 4 //+
	POWER_MODE_SEL5 POWER_SEL = 0x01 << 5 //+
	POWER_MODE_SEL6 POWER_SEL = 0x01 << 6 //+
	POWER_MODE_SEL7 POWER_SEL = 0x01 << 7 //+
)

const (
	POWER_MODE_SEL0n = 0
	POWER_MODE_SEL1n = 1
	POWER_MODE_SEL2n = 2
	POWER_MODE_SEL3n = 3
	POWER_MODE_SEL4n = 4
	POWER_MODE_SEL5n = 5
	POWER_MODE_SEL6n = 6
	POWER_MODE_SEL7n = 7
)
