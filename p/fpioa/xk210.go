// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package fpioa

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/bus"
	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	IO      [48]RIO
	TIE_EN  [8]RTIE_EN
	TIE_VAL [8]RTIE_VAL
}

func FPIOA() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.FPIOA_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB0
}

type IO uint32

type RIO struct{ mmio.U32 }

func (r *RIO) LoadBits(mask IO) IO  { return IO(r.U32.LoadBits(uint32(mask))) }
func (r *RIO) StoreBits(mask, b IO) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIO) SetBits(mask IO)      { r.U32.SetBits(uint32(mask)) }
func (r *RIO) ClearBits(mask IO)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIO) Load() IO             { return IO(r.U32.Load()) }
func (r *RIO) Store(b IO)           { r.U32.Store(uint32(b)) }

type RMIO struct{ mmio.UM32 }

func (rm RMIO) Load() IO   { return IO(rm.UM32.Load()) }
func (rm RMIO) Store(b IO) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CH_SEL(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(CH_SEL)}}
}

func (p *Periph) DS(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(DS)}}
}

func (p *Periph) OE_EN(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(OE_EN)}}
}

func (p *Periph) OE_INV(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(OE_INV)}}
}

func (p *Periph) DO_SEL(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(DO_SEL)}}
}

func (p *Periph) DO_INV(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(DO_INV)}}
}

func (p *Periph) PU(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(PU)}}
}

func (p *Periph) PD(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(PD)}}
}

func (p *Periph) SL(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(SL)}}
}

func (p *Periph) IE_EN(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(IE_EN)}}
}

func (p *Periph) IE_INV(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(IE_INV)}}
}

func (p *Periph) DI_INV(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(DI_INV)}}
}

func (p *Periph) ST(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(ST)}}
}

func (p *Periph) PAD_DI(n int) RMIO {
	return RMIO{mmio.UM32{&p.IO[n].U32, uint32(PAD_DI)}}
}

type TIE_EN uint32

type RTIE_EN struct{ mmio.U32 }

func (r *RTIE_EN) LoadBits(mask TIE_EN) TIE_EN { return TIE_EN(r.U32.LoadBits(uint32(mask))) }
func (r *RTIE_EN) StoreBits(mask, b TIE_EN)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTIE_EN) SetBits(mask TIE_EN)         { r.U32.SetBits(uint32(mask)) }
func (r *RTIE_EN) ClearBits(mask TIE_EN)       { r.U32.ClearBits(uint32(mask)) }
func (r *RTIE_EN) Load() TIE_EN                { return TIE_EN(r.U32.Load()) }
func (r *RTIE_EN) Store(b TIE_EN)              { r.U32.Store(uint32(b)) }

type RMTIE_EN struct{ mmio.UM32 }

func (rm RMTIE_EN) Load() TIE_EN   { return TIE_EN(rm.UM32.Load()) }
func (rm RMTIE_EN) Store(b TIE_EN) { rm.UM32.Store(uint32(b)) }

type TIE_VAL uint32

type RTIE_VAL struct{ mmio.U32 }

func (r *RTIE_VAL) LoadBits(mask TIE_VAL) TIE_VAL { return TIE_VAL(r.U32.LoadBits(uint32(mask))) }
func (r *RTIE_VAL) StoreBits(mask, b TIE_VAL)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTIE_VAL) SetBits(mask TIE_VAL)          { r.U32.SetBits(uint32(mask)) }
func (r *RTIE_VAL) ClearBits(mask TIE_VAL)        { r.U32.ClearBits(uint32(mask)) }
func (r *RTIE_VAL) Load() TIE_VAL                 { return TIE_VAL(r.U32.Load()) }
func (r *RTIE_VAL) Store(b TIE_VAL)               { r.U32.Store(uint32(b)) }

type RMTIE_VAL struct{ mmio.UM32 }

func (rm RMTIE_VAL) Load() TIE_VAL   { return TIE_VAL(rm.UM32.Load()) }
func (rm RMTIE_VAL) Store(b TIE_VAL) { rm.UM32.Store(uint32(b)) }
