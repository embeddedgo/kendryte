// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package gpiohs

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	INPUT_VAL  RINPUT_VAL
	INPUT_EN   RINPUT_EN
	OUTPUT_EN  ROUTPUT_EN
	OUTPUT_VAL ROUTPUT_VAL
	PULLUP_EN  RPULLUP_EN
	DRIVE      RDRIVE
	RISE_IE    RRISE_IE
	RISE_IP    RRISE_IP
	FALL_IE    RFALL_IE
	FALL_IP    RFALL_IP
	HIGH_IE    RHIGH_IE
	HIGH_IP    RHIGH_IP
	LOW_IE     RLOW_IE
	LOW_IP     RLOW_IP
	IOF_EN     RIOF_EN
	IOF_SEL    RIOF_SEL
	OUTPUT_XOR ROUTPUT_XOR
}

func GPIOHS() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOHS_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type INPUT_VAL uint32

type RINPUT_VAL struct{ mmio.U32 }

func (r *RINPUT_VAL) LoadBits(mask INPUT_VAL) INPUT_VAL {
	return INPUT_VAL(r.U32.LoadBits(uint32(mask)))
}
func (r *RINPUT_VAL) StoreBits(mask, b INPUT_VAL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINPUT_VAL) SetBits(mask INPUT_VAL)      { r.U32.SetBits(uint32(mask)) }
func (r *RINPUT_VAL) ClearBits(mask INPUT_VAL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RINPUT_VAL) Load() INPUT_VAL             { return INPUT_VAL(r.U32.Load()) }
func (r *RINPUT_VAL) Store(b INPUT_VAL)           { r.U32.Store(uint32(b)) }

type RMINPUT_VAL struct{ mmio.UM32 }

func (rm RMINPUT_VAL) Load() INPUT_VAL   { return INPUT_VAL(rm.UM32.Load()) }
func (rm RMINPUT_VAL) Store(b INPUT_VAL) { rm.UM32.Store(uint32(b)) }

type INPUT_EN uint32

type RINPUT_EN struct{ mmio.U32 }

func (r *RINPUT_EN) LoadBits(mask INPUT_EN) INPUT_EN { return INPUT_EN(r.U32.LoadBits(uint32(mask))) }
func (r *RINPUT_EN) StoreBits(mask, b INPUT_EN)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RINPUT_EN) SetBits(mask INPUT_EN)           { r.U32.SetBits(uint32(mask)) }
func (r *RINPUT_EN) ClearBits(mask INPUT_EN)         { r.U32.ClearBits(uint32(mask)) }
func (r *RINPUT_EN) Load() INPUT_EN                  { return INPUT_EN(r.U32.Load()) }
func (r *RINPUT_EN) Store(b INPUT_EN)                { r.U32.Store(uint32(b)) }

type RMINPUT_EN struct{ mmio.UM32 }

func (rm RMINPUT_EN) Load() INPUT_EN   { return INPUT_EN(rm.UM32.Load()) }
func (rm RMINPUT_EN) Store(b INPUT_EN) { rm.UM32.Store(uint32(b)) }

type OUTPUT_EN uint32

type ROUTPUT_EN struct{ mmio.U32 }

func (r *ROUTPUT_EN) LoadBits(mask OUTPUT_EN) OUTPUT_EN {
	return OUTPUT_EN(r.U32.LoadBits(uint32(mask)))
}
func (r *ROUTPUT_EN) StoreBits(mask, b OUTPUT_EN) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUTPUT_EN) SetBits(mask OUTPUT_EN)      { r.U32.SetBits(uint32(mask)) }
func (r *ROUTPUT_EN) ClearBits(mask OUTPUT_EN)    { r.U32.ClearBits(uint32(mask)) }
func (r *ROUTPUT_EN) Load() OUTPUT_EN             { return OUTPUT_EN(r.U32.Load()) }
func (r *ROUTPUT_EN) Store(b OUTPUT_EN)           { r.U32.Store(uint32(b)) }

type RMOUTPUT_EN struct{ mmio.UM32 }

func (rm RMOUTPUT_EN) Load() OUTPUT_EN   { return OUTPUT_EN(rm.UM32.Load()) }
func (rm RMOUTPUT_EN) Store(b OUTPUT_EN) { rm.UM32.Store(uint32(b)) }

type OUTPUT_VAL uint32

type ROUTPUT_VAL struct{ mmio.U32 }

func (r *ROUTPUT_VAL) LoadBits(mask OUTPUT_VAL) OUTPUT_VAL {
	return OUTPUT_VAL(r.U32.LoadBits(uint32(mask)))
}
func (r *ROUTPUT_VAL) StoreBits(mask, b OUTPUT_VAL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUTPUT_VAL) SetBits(mask OUTPUT_VAL)      { r.U32.SetBits(uint32(mask)) }
func (r *ROUTPUT_VAL) ClearBits(mask OUTPUT_VAL)    { r.U32.ClearBits(uint32(mask)) }
func (r *ROUTPUT_VAL) Load() OUTPUT_VAL             { return OUTPUT_VAL(r.U32.Load()) }
func (r *ROUTPUT_VAL) Store(b OUTPUT_VAL)           { r.U32.Store(uint32(b)) }

type RMOUTPUT_VAL struct{ mmio.UM32 }

func (rm RMOUTPUT_VAL) Load() OUTPUT_VAL   { return OUTPUT_VAL(rm.UM32.Load()) }
func (rm RMOUTPUT_VAL) Store(b OUTPUT_VAL) { rm.UM32.Store(uint32(b)) }

type PULLUP_EN uint32

type RPULLUP_EN struct{ mmio.U32 }

func (r *RPULLUP_EN) LoadBits(mask PULLUP_EN) PULLUP_EN {
	return PULLUP_EN(r.U32.LoadBits(uint32(mask)))
}
func (r *RPULLUP_EN) StoreBits(mask, b PULLUP_EN) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPULLUP_EN) SetBits(mask PULLUP_EN)      { r.U32.SetBits(uint32(mask)) }
func (r *RPULLUP_EN) ClearBits(mask PULLUP_EN)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPULLUP_EN) Load() PULLUP_EN             { return PULLUP_EN(r.U32.Load()) }
func (r *RPULLUP_EN) Store(b PULLUP_EN)           { r.U32.Store(uint32(b)) }

type RMPULLUP_EN struct{ mmio.UM32 }

func (rm RMPULLUP_EN) Load() PULLUP_EN   { return PULLUP_EN(rm.UM32.Load()) }
func (rm RMPULLUP_EN) Store(b PULLUP_EN) { rm.UM32.Store(uint32(b)) }

type DRIVE uint32

type RDRIVE struct{ mmio.U32 }

func (r *RDRIVE) LoadBits(mask DRIVE) DRIVE { return DRIVE(r.U32.LoadBits(uint32(mask))) }
func (r *RDRIVE) StoreBits(mask, b DRIVE)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDRIVE) SetBits(mask DRIVE)        { r.U32.SetBits(uint32(mask)) }
func (r *RDRIVE) ClearBits(mask DRIVE)      { r.U32.ClearBits(uint32(mask)) }
func (r *RDRIVE) Load() DRIVE               { return DRIVE(r.U32.Load()) }
func (r *RDRIVE) Store(b DRIVE)             { r.U32.Store(uint32(b)) }

type RMDRIVE struct{ mmio.UM32 }

func (rm RMDRIVE) Load() DRIVE   { return DRIVE(rm.UM32.Load()) }
func (rm RMDRIVE) Store(b DRIVE) { rm.UM32.Store(uint32(b)) }

type RISE_IE uint32

type RRISE_IE struct{ mmio.U32 }

func (r *RRISE_IE) LoadBits(mask RISE_IE) RISE_IE { return RISE_IE(r.U32.LoadBits(uint32(mask))) }
func (r *RRISE_IE) StoreBits(mask, b RISE_IE)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRISE_IE) SetBits(mask RISE_IE)          { r.U32.SetBits(uint32(mask)) }
func (r *RRISE_IE) ClearBits(mask RISE_IE)        { r.U32.ClearBits(uint32(mask)) }
func (r *RRISE_IE) Load() RISE_IE                 { return RISE_IE(r.U32.Load()) }
func (r *RRISE_IE) Store(b RISE_IE)               { r.U32.Store(uint32(b)) }

type RMRISE_IE struct{ mmio.UM32 }

func (rm RMRISE_IE) Load() RISE_IE   { return RISE_IE(rm.UM32.Load()) }
func (rm RMRISE_IE) Store(b RISE_IE) { rm.UM32.Store(uint32(b)) }

type RISE_IP uint32

type RRISE_IP struct{ mmio.U32 }

func (r *RRISE_IP) LoadBits(mask RISE_IP) RISE_IP { return RISE_IP(r.U32.LoadBits(uint32(mask))) }
func (r *RRISE_IP) StoreBits(mask, b RISE_IP)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRISE_IP) SetBits(mask RISE_IP)          { r.U32.SetBits(uint32(mask)) }
func (r *RRISE_IP) ClearBits(mask RISE_IP)        { r.U32.ClearBits(uint32(mask)) }
func (r *RRISE_IP) Load() RISE_IP                 { return RISE_IP(r.U32.Load()) }
func (r *RRISE_IP) Store(b RISE_IP)               { r.U32.Store(uint32(b)) }

type RMRISE_IP struct{ mmio.UM32 }

func (rm RMRISE_IP) Load() RISE_IP   { return RISE_IP(rm.UM32.Load()) }
func (rm RMRISE_IP) Store(b RISE_IP) { rm.UM32.Store(uint32(b)) }

type FALL_IE uint32

type RFALL_IE struct{ mmio.U32 }

func (r *RFALL_IE) LoadBits(mask FALL_IE) FALL_IE { return FALL_IE(r.U32.LoadBits(uint32(mask))) }
func (r *RFALL_IE) StoreBits(mask, b FALL_IE)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFALL_IE) SetBits(mask FALL_IE)          { r.U32.SetBits(uint32(mask)) }
func (r *RFALL_IE) ClearBits(mask FALL_IE)        { r.U32.ClearBits(uint32(mask)) }
func (r *RFALL_IE) Load() FALL_IE                 { return FALL_IE(r.U32.Load()) }
func (r *RFALL_IE) Store(b FALL_IE)               { r.U32.Store(uint32(b)) }

type RMFALL_IE struct{ mmio.UM32 }

func (rm RMFALL_IE) Load() FALL_IE   { return FALL_IE(rm.UM32.Load()) }
func (rm RMFALL_IE) Store(b FALL_IE) { rm.UM32.Store(uint32(b)) }

type FALL_IP uint32

type RFALL_IP struct{ mmio.U32 }

func (r *RFALL_IP) LoadBits(mask FALL_IP) FALL_IP { return FALL_IP(r.U32.LoadBits(uint32(mask))) }
func (r *RFALL_IP) StoreBits(mask, b FALL_IP)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFALL_IP) SetBits(mask FALL_IP)          { r.U32.SetBits(uint32(mask)) }
func (r *RFALL_IP) ClearBits(mask FALL_IP)        { r.U32.ClearBits(uint32(mask)) }
func (r *RFALL_IP) Load() FALL_IP                 { return FALL_IP(r.U32.Load()) }
func (r *RFALL_IP) Store(b FALL_IP)               { r.U32.Store(uint32(b)) }

type RMFALL_IP struct{ mmio.UM32 }

func (rm RMFALL_IP) Load() FALL_IP   { return FALL_IP(rm.UM32.Load()) }
func (rm RMFALL_IP) Store(b FALL_IP) { rm.UM32.Store(uint32(b)) }

type HIGH_IE uint32

type RHIGH_IE struct{ mmio.U32 }

func (r *RHIGH_IE) LoadBits(mask HIGH_IE) HIGH_IE { return HIGH_IE(r.U32.LoadBits(uint32(mask))) }
func (r *RHIGH_IE) StoreBits(mask, b HIGH_IE)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHIGH_IE) SetBits(mask HIGH_IE)          { r.U32.SetBits(uint32(mask)) }
func (r *RHIGH_IE) ClearBits(mask HIGH_IE)        { r.U32.ClearBits(uint32(mask)) }
func (r *RHIGH_IE) Load() HIGH_IE                 { return HIGH_IE(r.U32.Load()) }
func (r *RHIGH_IE) Store(b HIGH_IE)               { r.U32.Store(uint32(b)) }

type RMHIGH_IE struct{ mmio.UM32 }

func (rm RMHIGH_IE) Load() HIGH_IE   { return HIGH_IE(rm.UM32.Load()) }
func (rm RMHIGH_IE) Store(b HIGH_IE) { rm.UM32.Store(uint32(b)) }

type HIGH_IP uint32

type RHIGH_IP struct{ mmio.U32 }

func (r *RHIGH_IP) LoadBits(mask HIGH_IP) HIGH_IP { return HIGH_IP(r.U32.LoadBits(uint32(mask))) }
func (r *RHIGH_IP) StoreBits(mask, b HIGH_IP)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHIGH_IP) SetBits(mask HIGH_IP)          { r.U32.SetBits(uint32(mask)) }
func (r *RHIGH_IP) ClearBits(mask HIGH_IP)        { r.U32.ClearBits(uint32(mask)) }
func (r *RHIGH_IP) Load() HIGH_IP                 { return HIGH_IP(r.U32.Load()) }
func (r *RHIGH_IP) Store(b HIGH_IP)               { r.U32.Store(uint32(b)) }

type RMHIGH_IP struct{ mmio.UM32 }

func (rm RMHIGH_IP) Load() HIGH_IP   { return HIGH_IP(rm.UM32.Load()) }
func (rm RMHIGH_IP) Store(b HIGH_IP) { rm.UM32.Store(uint32(b)) }

type LOW_IE uint32

type RLOW_IE struct{ mmio.U32 }

func (r *RLOW_IE) LoadBits(mask LOW_IE) LOW_IE { return LOW_IE(r.U32.LoadBits(uint32(mask))) }
func (r *RLOW_IE) StoreBits(mask, b LOW_IE)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLOW_IE) SetBits(mask LOW_IE)         { r.U32.SetBits(uint32(mask)) }
func (r *RLOW_IE) ClearBits(mask LOW_IE)       { r.U32.ClearBits(uint32(mask)) }
func (r *RLOW_IE) Load() LOW_IE                { return LOW_IE(r.U32.Load()) }
func (r *RLOW_IE) Store(b LOW_IE)              { r.U32.Store(uint32(b)) }

type RMLOW_IE struct{ mmio.UM32 }

func (rm RMLOW_IE) Load() LOW_IE   { return LOW_IE(rm.UM32.Load()) }
func (rm RMLOW_IE) Store(b LOW_IE) { rm.UM32.Store(uint32(b)) }

type LOW_IP uint32

type RLOW_IP struct{ mmio.U32 }

func (r *RLOW_IP) LoadBits(mask LOW_IP) LOW_IP { return LOW_IP(r.U32.LoadBits(uint32(mask))) }
func (r *RLOW_IP) StoreBits(mask, b LOW_IP)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLOW_IP) SetBits(mask LOW_IP)         { r.U32.SetBits(uint32(mask)) }
func (r *RLOW_IP) ClearBits(mask LOW_IP)       { r.U32.ClearBits(uint32(mask)) }
func (r *RLOW_IP) Load() LOW_IP                { return LOW_IP(r.U32.Load()) }
func (r *RLOW_IP) Store(b LOW_IP)              { r.U32.Store(uint32(b)) }

type RMLOW_IP struct{ mmio.UM32 }

func (rm RMLOW_IP) Load() LOW_IP   { return LOW_IP(rm.UM32.Load()) }
func (rm RMLOW_IP) Store(b LOW_IP) { rm.UM32.Store(uint32(b)) }

type IOF_EN uint32

type RIOF_EN struct{ mmio.U32 }

func (r *RIOF_EN) LoadBits(mask IOF_EN) IOF_EN { return IOF_EN(r.U32.LoadBits(uint32(mask))) }
func (r *RIOF_EN) StoreBits(mask, b IOF_EN)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOF_EN) SetBits(mask IOF_EN)         { r.U32.SetBits(uint32(mask)) }
func (r *RIOF_EN) ClearBits(mask IOF_EN)       { r.U32.ClearBits(uint32(mask)) }
func (r *RIOF_EN) Load() IOF_EN                { return IOF_EN(r.U32.Load()) }
func (r *RIOF_EN) Store(b IOF_EN)              { r.U32.Store(uint32(b)) }

type RMIOF_EN struct{ mmio.UM32 }

func (rm RMIOF_EN) Load() IOF_EN   { return IOF_EN(rm.UM32.Load()) }
func (rm RMIOF_EN) Store(b IOF_EN) { rm.UM32.Store(uint32(b)) }

type IOF_SEL uint32

type RIOF_SEL struct{ mmio.U32 }

func (r *RIOF_SEL) LoadBits(mask IOF_SEL) IOF_SEL { return IOF_SEL(r.U32.LoadBits(uint32(mask))) }
func (r *RIOF_SEL) StoreBits(mask, b IOF_SEL)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOF_SEL) SetBits(mask IOF_SEL)          { r.U32.SetBits(uint32(mask)) }
func (r *RIOF_SEL) ClearBits(mask IOF_SEL)        { r.U32.ClearBits(uint32(mask)) }
func (r *RIOF_SEL) Load() IOF_SEL                 { return IOF_SEL(r.U32.Load()) }
func (r *RIOF_SEL) Store(b IOF_SEL)               { r.U32.Store(uint32(b)) }

type RMIOF_SEL struct{ mmio.UM32 }

func (rm RMIOF_SEL) Load() IOF_SEL   { return IOF_SEL(rm.UM32.Load()) }
func (rm RMIOF_SEL) Store(b IOF_SEL) { rm.UM32.Store(uint32(b)) }

type OUTPUT_XOR uint32

type ROUTPUT_XOR struct{ mmio.U32 }

func (r *ROUTPUT_XOR) LoadBits(mask OUTPUT_XOR) OUTPUT_XOR {
	return OUTPUT_XOR(r.U32.LoadBits(uint32(mask)))
}
func (r *ROUTPUT_XOR) StoreBits(mask, b OUTPUT_XOR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROUTPUT_XOR) SetBits(mask OUTPUT_XOR)      { r.U32.SetBits(uint32(mask)) }
func (r *ROUTPUT_XOR) ClearBits(mask OUTPUT_XOR)    { r.U32.ClearBits(uint32(mask)) }
func (r *ROUTPUT_XOR) Load() OUTPUT_XOR             { return OUTPUT_XOR(r.U32.Load()) }
func (r *ROUTPUT_XOR) Store(b OUTPUT_XOR)           { r.U32.Store(uint32(b)) }

type RMOUTPUT_XOR struct{ mmio.UM32 }

func (rm RMOUTPUT_XOR) Load() OUTPUT_XOR   { return OUTPUT_XOR(rm.UM32.Load()) }
func (rm RMOUTPUT_XOR) Store(b OUTPUT_XOR) { rm.UM32.Store(uint32(b)) }
