// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build k210

// Package spi provides access to the registers of the SPI0 peripheral.
//
// Instances:
//  SPI0  SPI0_BASE  APB2  SPI0  Serial Peripheral Interface 0 (master)
//  SPI1  SPI1_BASE  APB2  SPI1  Serial Peripheral Interface 1 (master)
//  SPI3  SPI3_BASE  APB2  SPI3  Serial Peripheral Interface 3 (master)
// Registers:
//  0x000 32  CTRLR0            Control Register 0
//  0x004 32  CTRLR1            Control Register 1
//  0x008 32  SSIENR            Enable Register
//  0x00C 32  MWCR              Microwire Control Register
//  0x010 32  SER               Slave Enable Register
//  0x014 32  BAUDR             Baud Rate Select
//  0x018 32  TXFTLR            Transmit FIFO Threshold Level
//  0x01C 32  RXFTLR            Receive FIFO Threshold Level
//  0x020 32  TXFLR             Transmit FIFO Level Register
//  0x024 32  RXFLR             Receive FIFO Level Register
//  0x028 32  SR                Status Register
//  0x02C 32  IMR               Interrupt Mask Register
//  0x030 32  ISR               Interrupt Status Register
//  0x034 32  RAW_ISR           Raw Interrupt Status Register
//  0x038 32  TXOICR            Transmit FIFO Overflow Interrupt Clear Register
//  0x03C 32  RXOICR            Receive FIFO Overflow Interrupt Clear Register
//  0x040 32  RXUICR            Receive FIFO Underflow Interrupt Clear Register
//  0x044 32  MSTICR            Multi-Master Interrupt Clear Register
//  0x048 32  ICR               Interrupt Clear Register
//  0x04C 32  DMACR             DMA Control Register
//  0x050 32  DMATDLR           DMA Transmit Data Level
//  0x054 32  DMARDLR           DMA Receive Data Level
//  0x058 32  IDR               Identification Register
//  0x05C 32  SSIC_VERSION_ID   DWC_ssi component version
//  0x060 32  DR[36]            Data Register
//  0x0F0 32  RX_SAMPLE_DELAY   RX Sample Delay Register
//  0x0F4 32  SPI_CTRLR0        SPI Control Register
//  0x0FC 32  XIP_MODE_BITS     XIP Mode bits
//  0x100 32  XIP_INCR_INST     XIP INCR transfer opcode
//  0x104 32  XIP_WRAP_INST     XIP WRAP transfer opcode
//  0x108 32  XIP_CTRL          XIP Control Register
//  0x10C 32  XIP_SER           XIP Slave Enable Register
//  0x110 32  XRXOICR           XIP Receive FIFO Overflow Interrupt Clear Register
//  0x114 32  XIP_CNT_TIME_OUT  XIP time out register for continuous transfers
//  0x118 32  ENDIAN            ENDIAN
// Import:
//  github.com/embeddedgo/kendryte/p/bus
//  github.com/embeddedgo/kendryte/p/mmap
package spi

const (
	WORK_MODE    CTRLR0 = 0x03 << 6  //+ WORK_MODE
	MODE0        CTRLR0 = 0x00 << 6  //  MODE_0
	MODE1        CTRLR0 = 0x01 << 6  //  MODE_1
	MODE2        CTRLR0 = 0x02 << 6  //  MODE_2
	MODE3        CTRLR0 = 0x03 << 6  //  MODE_3
	TMOD         CTRLR0 = 0x03 << 8  //+ TRANSFER_MODE
	TRANS_RECV   CTRLR0 = 0x00 << 8  //  TRANS_RECV
	TRANS        CTRLR0 = 0x01 << 8  //  TRANS
	RECV         CTRLR0 = 0x02 << 8  //  RECV
	EEROM        CTRLR0 = 0x03 << 8  //  EEROM
	DATA_LENGTH  CTRLR0 = 0x1F << 16 //+ DATA_BIT_LENGTH
	FRAME_FORMAT CTRLR0 = 0x03 << 21 //+ FRAME_FORMAT
	SINGLE       CTRLR0 = 0x00 << 21 //  STANDARD
	DUAL         CTRLR0 = 0x01 << 21 //  DUAL
	QUAD         CTRLR0 = 0x02 << 21 //  QUAD
	OCTAL        CTRLR0 = 0x03 << 21 //  OCTAL
)

const (
	WORK_MODEn    = 6
	TMODn         = 8
	DATA_LENGTHn  = 16
	FRAME_FORMATn = 21
)

const (
	AITM            SPI_CTRLR0 = 0x03 << 0  //+ instruction_address_trans_mode
	STANDARD        SPI_CTRLR0 = 0x00 << 0  //  STANDARD
	ADDR_STANDARD   SPI_CTRLR0 = 0x01 << 0  //  ADDR_STANDARD
	AS_FRAME_FORMAT SPI_CTRLR0 = 0x02 << 0  //  AS_FRAME_FORMAT
	ADDR_LENGTH     SPI_CTRLR0 = 0x0F << 2  //+ ADDR_LENGTH
	INST_LENGTH     SPI_CTRLR0 = 0x03 << 8  //+ INSTRUCTION_LENGTH
	WAIT_CYCLES     SPI_CTRLR0 = 0x1F << 11 //+ WAIT_CYCLES
)

const (
	AITMn        = 0
	ADDR_LENGTHn = 2
	INST_LENGTHn = 8
	WAIT_CYCLESn = 11
)
