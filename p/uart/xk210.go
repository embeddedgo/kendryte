// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build k210

package uart

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/kendryte/p/bus"
	"github.com/embeddedgo/kendryte/p/mmap"
)

type Periph struct {
	RBR_DLL_THR RRBR_DLL_THR
	DLH_IER     RDLH_IER
	FCR_IIR     RFCR_IIR
	LCR         RLCR
	MCR         RMCR
	LSR         RLSR
	MSR         RMSR
	SCR         RSCR
	LPDLL       RLPDLL
	LPDLH       RLPDLH
	_           [2]uint32
	SRBR_STHR   [16]RSRBR_STHR
	FAR         RFAR
	TFR         RTFR
	RFW         RRFW
	USR         RUSR
	TFL         RTFL
	RFL         RRFL
	SRR         RSRR
	SRTS        RSRTS
	SBCR        RSBCR
	SDMAM       RSDMAM
	SFE         RSFE
	SRT         RSRT
	STET        RSTET
	HTX         RHTX
	DMASA       RDMASA
	TCR         RTCR
	DE_EN       RDE_EN
	RE_EN       RRE_EN
	DET         RDET
	TAT         RTAT
	DLF         RDLF
	RAR         RRAR
	TAR         RTAR
	LCR_EXT     RLCR_EXT
	_           [9]uint32
	CPR         RCPR
	UCV         RUCV
	CTR         RCTR
}

func UART1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UART1_BASE))) }
func UART2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UART2_BASE))) }
func UART3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.UART3_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB0
}

type RBR_DLL_THR uint32

type RRBR_DLL_THR struct{ mmio.U32 }

func (r *RRBR_DLL_THR) LoadBits(mask RBR_DLL_THR) RBR_DLL_THR {
	return RBR_DLL_THR(r.U32.LoadBits(uint32(mask)))
}
func (r *RRBR_DLL_THR) StoreBits(mask, b RBR_DLL_THR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRBR_DLL_THR) SetBits(mask RBR_DLL_THR)      { r.U32.SetBits(uint32(mask)) }
func (r *RRBR_DLL_THR) ClearBits(mask RBR_DLL_THR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRBR_DLL_THR) Load() RBR_DLL_THR             { return RBR_DLL_THR(r.U32.Load()) }
func (r *RRBR_DLL_THR) Store(b RBR_DLL_THR)           { r.U32.Store(uint32(b)) }

type RMRBR_DLL_THR struct{ mmio.UM32 }

func (rm RMRBR_DLL_THR) Load() RBR_DLL_THR   { return RBR_DLL_THR(rm.UM32.Load()) }
func (rm RMRBR_DLL_THR) Store(b RBR_DLL_THR) { rm.UM32.Store(uint32(b)) }

type DLH_IER uint32

type RDLH_IER struct{ mmio.U32 }

func (r *RDLH_IER) LoadBits(mask DLH_IER) DLH_IER { return DLH_IER(r.U32.LoadBits(uint32(mask))) }
func (r *RDLH_IER) StoreBits(mask, b DLH_IER)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDLH_IER) SetBits(mask DLH_IER)          { r.U32.SetBits(uint32(mask)) }
func (r *RDLH_IER) ClearBits(mask DLH_IER)        { r.U32.ClearBits(uint32(mask)) }
func (r *RDLH_IER) Load() DLH_IER                 { return DLH_IER(r.U32.Load()) }
func (r *RDLH_IER) Store(b DLH_IER)               { r.U32.Store(uint32(b)) }

type RMDLH_IER struct{ mmio.UM32 }

func (rm RMDLH_IER) Load() DLH_IER   { return DLH_IER(rm.UM32.Load()) }
func (rm RMDLH_IER) Store(b DLH_IER) { rm.UM32.Store(uint32(b)) }

type FCR_IIR uint32

type RFCR_IIR struct{ mmio.U32 }

func (r *RFCR_IIR) LoadBits(mask FCR_IIR) FCR_IIR { return FCR_IIR(r.U32.LoadBits(uint32(mask))) }
func (r *RFCR_IIR) StoreBits(mask, b FCR_IIR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFCR_IIR) SetBits(mask FCR_IIR)          { r.U32.SetBits(uint32(mask)) }
func (r *RFCR_IIR) ClearBits(mask FCR_IIR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RFCR_IIR) Load() FCR_IIR                 { return FCR_IIR(r.U32.Load()) }
func (r *RFCR_IIR) Store(b FCR_IIR)               { r.U32.Store(uint32(b)) }

type RMFCR_IIR struct{ mmio.UM32 }

func (rm RMFCR_IIR) Load() FCR_IIR   { return FCR_IIR(rm.UM32.Load()) }
func (rm RMFCR_IIR) Store(b FCR_IIR) { rm.UM32.Store(uint32(b)) }

type LCR uint32

type RLCR struct{ mmio.U32 }

func (r *RLCR) LoadBits(mask LCR) LCR { return LCR(r.U32.LoadBits(uint32(mask))) }
func (r *RLCR) StoreBits(mask, b LCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCR) SetBits(mask LCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLCR) ClearBits(mask LCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLCR) Load() LCR             { return LCR(r.U32.Load()) }
func (r *RLCR) Store(b LCR)           { r.U32.Store(uint32(b)) }

type RMLCR struct{ mmio.UM32 }

func (rm RMLCR) Load() LCR   { return LCR(rm.UM32.Load()) }
func (rm RMLCR) Store(b LCR) { rm.UM32.Store(uint32(b)) }

type MCR uint32

type RMCR struct{ mmio.U32 }

func (r *RMCR) LoadBits(mask MCR) MCR { return MCR(r.U32.LoadBits(uint32(mask))) }
func (r *RMCR) StoreBits(mask, b MCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMCR) SetBits(mask MCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMCR) ClearBits(mask MCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMCR) Load() MCR             { return MCR(r.U32.Load()) }
func (r *RMCR) Store(b MCR)           { r.U32.Store(uint32(b)) }

type RMMCR struct{ mmio.UM32 }

func (rm RMMCR) Load() MCR   { return MCR(rm.UM32.Load()) }
func (rm RMMCR) Store(b MCR) { rm.UM32.Store(uint32(b)) }

type LSR uint32

type RLSR struct{ mmio.U32 }

func (r *RLSR) LoadBits(mask LSR) LSR { return LSR(r.U32.LoadBits(uint32(mask))) }
func (r *RLSR) StoreBits(mask, b LSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLSR) SetBits(mask LSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RLSR) ClearBits(mask LSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RLSR) Load() LSR             { return LSR(r.U32.Load()) }
func (r *RLSR) Store(b LSR)           { r.U32.Store(uint32(b)) }

type RMLSR struct{ mmio.UM32 }

func (rm RMLSR) Load() LSR   { return LSR(rm.UM32.Load()) }
func (rm RMLSR) Store(b LSR) { rm.UM32.Store(uint32(b)) }

type MSR uint32

type RMSR struct{ mmio.U32 }

func (r *RMSR) LoadBits(mask MSR) MSR { return MSR(r.U32.LoadBits(uint32(mask))) }
func (r *RMSR) StoreBits(mask, b MSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMSR) SetBits(mask MSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMSR) ClearBits(mask MSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMSR) Load() MSR             { return MSR(r.U32.Load()) }
func (r *RMSR) Store(b MSR)           { r.U32.Store(uint32(b)) }

type RMMSR struct{ mmio.UM32 }

func (rm RMMSR) Load() MSR   { return MSR(rm.UM32.Load()) }
func (rm RMMSR) Store(b MSR) { rm.UM32.Store(uint32(b)) }

type SCR uint32

type RSCR struct{ mmio.U32 }

func (r *RSCR) LoadBits(mask SCR) SCR { return SCR(r.U32.LoadBits(uint32(mask))) }
func (r *RSCR) StoreBits(mask, b SCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSCR) SetBits(mask SCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSCR) ClearBits(mask SCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSCR) Load() SCR             { return SCR(r.U32.Load()) }
func (r *RSCR) Store(b SCR)           { r.U32.Store(uint32(b)) }

type RMSCR struct{ mmio.UM32 }

func (rm RMSCR) Load() SCR   { return SCR(rm.UM32.Load()) }
func (rm RMSCR) Store(b SCR) { rm.UM32.Store(uint32(b)) }

type LPDLL uint32

type RLPDLL struct{ mmio.U32 }

func (r *RLPDLL) LoadBits(mask LPDLL) LPDLL { return LPDLL(r.U32.LoadBits(uint32(mask))) }
func (r *RLPDLL) StoreBits(mask, b LPDLL)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLPDLL) SetBits(mask LPDLL)        { r.U32.SetBits(uint32(mask)) }
func (r *RLPDLL) ClearBits(mask LPDLL)      { r.U32.ClearBits(uint32(mask)) }
func (r *RLPDLL) Load() LPDLL               { return LPDLL(r.U32.Load()) }
func (r *RLPDLL) Store(b LPDLL)             { r.U32.Store(uint32(b)) }

type RMLPDLL struct{ mmio.UM32 }

func (rm RMLPDLL) Load() LPDLL   { return LPDLL(rm.UM32.Load()) }
func (rm RMLPDLL) Store(b LPDLL) { rm.UM32.Store(uint32(b)) }

type LPDLH uint32

type RLPDLH struct{ mmio.U32 }

func (r *RLPDLH) LoadBits(mask LPDLH) LPDLH { return LPDLH(r.U32.LoadBits(uint32(mask))) }
func (r *RLPDLH) StoreBits(mask, b LPDLH)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLPDLH) SetBits(mask LPDLH)        { r.U32.SetBits(uint32(mask)) }
func (r *RLPDLH) ClearBits(mask LPDLH)      { r.U32.ClearBits(uint32(mask)) }
func (r *RLPDLH) Load() LPDLH               { return LPDLH(r.U32.Load()) }
func (r *RLPDLH) Store(b LPDLH)             { r.U32.Store(uint32(b)) }

type RMLPDLH struct{ mmio.UM32 }

func (rm RMLPDLH) Load() LPDLH   { return LPDLH(rm.UM32.Load()) }
func (rm RMLPDLH) Store(b LPDLH) { rm.UM32.Store(uint32(b)) }

type SRBR_STHR uint32

type RSRBR_STHR struct{ mmio.U32 }

func (r *RSRBR_STHR) LoadBits(mask SRBR_STHR) SRBR_STHR {
	return SRBR_STHR(r.U32.LoadBits(uint32(mask)))
}
func (r *RSRBR_STHR) StoreBits(mask, b SRBR_STHR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSRBR_STHR) SetBits(mask SRBR_STHR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSRBR_STHR) ClearBits(mask SRBR_STHR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSRBR_STHR) Load() SRBR_STHR             { return SRBR_STHR(r.U32.Load()) }
func (r *RSRBR_STHR) Store(b SRBR_STHR)           { r.U32.Store(uint32(b)) }

type RMSRBR_STHR struct{ mmio.UM32 }

func (rm RMSRBR_STHR) Load() SRBR_STHR   { return SRBR_STHR(rm.UM32.Load()) }
func (rm RMSRBR_STHR) Store(b SRBR_STHR) { rm.UM32.Store(uint32(b)) }

type FAR uint32

type RFAR struct{ mmio.U32 }

func (r *RFAR) LoadBits(mask FAR) FAR { return FAR(r.U32.LoadBits(uint32(mask))) }
func (r *RFAR) StoreBits(mask, b FAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFAR) SetBits(mask FAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFAR) ClearBits(mask FAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFAR) Load() FAR             { return FAR(r.U32.Load()) }
func (r *RFAR) Store(b FAR)           { r.U32.Store(uint32(b)) }

type RMFAR struct{ mmio.UM32 }

func (rm RMFAR) Load() FAR   { return FAR(rm.UM32.Load()) }
func (rm RMFAR) Store(b FAR) { rm.UM32.Store(uint32(b)) }

type TFR uint32

type RTFR struct{ mmio.U32 }

func (r *RTFR) LoadBits(mask TFR) TFR { return TFR(r.U32.LoadBits(uint32(mask))) }
func (r *RTFR) StoreBits(mask, b TFR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTFR) SetBits(mask TFR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTFR) ClearBits(mask TFR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTFR) Load() TFR             { return TFR(r.U32.Load()) }
func (r *RTFR) Store(b TFR)           { r.U32.Store(uint32(b)) }

type RMTFR struct{ mmio.UM32 }

func (rm RMTFR) Load() TFR   { return TFR(rm.UM32.Load()) }
func (rm RMTFR) Store(b TFR) { rm.UM32.Store(uint32(b)) }

type RFW uint32

type RRFW struct{ mmio.U32 }

func (r *RRFW) LoadBits(mask RFW) RFW { return RFW(r.U32.LoadBits(uint32(mask))) }
func (r *RRFW) StoreBits(mask, b RFW) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRFW) SetBits(mask RFW)      { r.U32.SetBits(uint32(mask)) }
func (r *RRFW) ClearBits(mask RFW)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRFW) Load() RFW             { return RFW(r.U32.Load()) }
func (r *RRFW) Store(b RFW)           { r.U32.Store(uint32(b)) }

type RMRFW struct{ mmio.UM32 }

func (rm RMRFW) Load() RFW   { return RFW(rm.UM32.Load()) }
func (rm RMRFW) Store(b RFW) { rm.UM32.Store(uint32(b)) }

type USR uint32

type RUSR struct{ mmio.U32 }

func (r *RUSR) LoadBits(mask USR) USR { return USR(r.U32.LoadBits(uint32(mask))) }
func (r *RUSR) StoreBits(mask, b USR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUSR) SetBits(mask USR)      { r.U32.SetBits(uint32(mask)) }
func (r *RUSR) ClearBits(mask USR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUSR) Load() USR             { return USR(r.U32.Load()) }
func (r *RUSR) Store(b USR)           { r.U32.Store(uint32(b)) }

type RMUSR struct{ mmio.UM32 }

func (rm RMUSR) Load() USR   { return USR(rm.UM32.Load()) }
func (rm RMUSR) Store(b USR) { rm.UM32.Store(uint32(b)) }

type TFL uint32

type RTFL struct{ mmio.U32 }

func (r *RTFL) LoadBits(mask TFL) TFL { return TFL(r.U32.LoadBits(uint32(mask))) }
func (r *RTFL) StoreBits(mask, b TFL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTFL) SetBits(mask TFL)      { r.U32.SetBits(uint32(mask)) }
func (r *RTFL) ClearBits(mask TFL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTFL) Load() TFL             { return TFL(r.U32.Load()) }
func (r *RTFL) Store(b TFL)           { r.U32.Store(uint32(b)) }

type RMTFL struct{ mmio.UM32 }

func (rm RMTFL) Load() TFL   { return TFL(rm.UM32.Load()) }
func (rm RMTFL) Store(b TFL) { rm.UM32.Store(uint32(b)) }

type RFL uint32

type RRFL struct{ mmio.U32 }

func (r *RRFL) LoadBits(mask RFL) RFL { return RFL(r.U32.LoadBits(uint32(mask))) }
func (r *RRFL) StoreBits(mask, b RFL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRFL) SetBits(mask RFL)      { r.U32.SetBits(uint32(mask)) }
func (r *RRFL) ClearBits(mask RFL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRFL) Load() RFL             { return RFL(r.U32.Load()) }
func (r *RRFL) Store(b RFL)           { r.U32.Store(uint32(b)) }

type RMRFL struct{ mmio.UM32 }

func (rm RMRFL) Load() RFL   { return RFL(rm.UM32.Load()) }
func (rm RMRFL) Store(b RFL) { rm.UM32.Store(uint32(b)) }

type SRR uint32

type RSRR struct{ mmio.U32 }

func (r *RSRR) LoadBits(mask SRR) SRR { return SRR(r.U32.LoadBits(uint32(mask))) }
func (r *RSRR) StoreBits(mask, b SRR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSRR) SetBits(mask SRR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSRR) ClearBits(mask SRR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSRR) Load() SRR             { return SRR(r.U32.Load()) }
func (r *RSRR) Store(b SRR)           { r.U32.Store(uint32(b)) }

type RMSRR struct{ mmio.UM32 }

func (rm RMSRR) Load() SRR   { return SRR(rm.UM32.Load()) }
func (rm RMSRR) Store(b SRR) { rm.UM32.Store(uint32(b)) }

type SRTS uint32

type RSRTS struct{ mmio.U32 }

func (r *RSRTS) LoadBits(mask SRTS) SRTS { return SRTS(r.U32.LoadBits(uint32(mask))) }
func (r *RSRTS) StoreBits(mask, b SRTS)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSRTS) SetBits(mask SRTS)       { r.U32.SetBits(uint32(mask)) }
func (r *RSRTS) ClearBits(mask SRTS)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSRTS) Load() SRTS              { return SRTS(r.U32.Load()) }
func (r *RSRTS) Store(b SRTS)            { r.U32.Store(uint32(b)) }

type RMSRTS struct{ mmio.UM32 }

func (rm RMSRTS) Load() SRTS   { return SRTS(rm.UM32.Load()) }
func (rm RMSRTS) Store(b SRTS) { rm.UM32.Store(uint32(b)) }

type SBCR uint32

type RSBCR struct{ mmio.U32 }

func (r *RSBCR) LoadBits(mask SBCR) SBCR { return SBCR(r.U32.LoadBits(uint32(mask))) }
func (r *RSBCR) StoreBits(mask, b SBCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSBCR) SetBits(mask SBCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RSBCR) ClearBits(mask SBCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSBCR) Load() SBCR              { return SBCR(r.U32.Load()) }
func (r *RSBCR) Store(b SBCR)            { r.U32.Store(uint32(b)) }

type RMSBCR struct{ mmio.UM32 }

func (rm RMSBCR) Load() SBCR   { return SBCR(rm.UM32.Load()) }
func (rm RMSBCR) Store(b SBCR) { rm.UM32.Store(uint32(b)) }

type SDMAM uint32

type RSDMAM struct{ mmio.U32 }

func (r *RSDMAM) LoadBits(mask SDMAM) SDMAM { return SDMAM(r.U32.LoadBits(uint32(mask))) }
func (r *RSDMAM) StoreBits(mask, b SDMAM)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSDMAM) SetBits(mask SDMAM)        { r.U32.SetBits(uint32(mask)) }
func (r *RSDMAM) ClearBits(mask SDMAM)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSDMAM) Load() SDMAM               { return SDMAM(r.U32.Load()) }
func (r *RSDMAM) Store(b SDMAM)             { r.U32.Store(uint32(b)) }

type RMSDMAM struct{ mmio.UM32 }

func (rm RMSDMAM) Load() SDMAM   { return SDMAM(rm.UM32.Load()) }
func (rm RMSDMAM) Store(b SDMAM) { rm.UM32.Store(uint32(b)) }

type SFE uint32

type RSFE struct{ mmio.U32 }

func (r *RSFE) LoadBits(mask SFE) SFE { return SFE(r.U32.LoadBits(uint32(mask))) }
func (r *RSFE) StoreBits(mask, b SFE) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSFE) SetBits(mask SFE)      { r.U32.SetBits(uint32(mask)) }
func (r *RSFE) ClearBits(mask SFE)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSFE) Load() SFE             { return SFE(r.U32.Load()) }
func (r *RSFE) Store(b SFE)           { r.U32.Store(uint32(b)) }

type RMSFE struct{ mmio.UM32 }

func (rm RMSFE) Load() SFE   { return SFE(rm.UM32.Load()) }
func (rm RMSFE) Store(b SFE) { rm.UM32.Store(uint32(b)) }

type SRT uint32

type RSRT struct{ mmio.U32 }

func (r *RSRT) LoadBits(mask SRT) SRT { return SRT(r.U32.LoadBits(uint32(mask))) }
func (r *RSRT) StoreBits(mask, b SRT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSRT) SetBits(mask SRT)      { r.U32.SetBits(uint32(mask)) }
func (r *RSRT) ClearBits(mask SRT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSRT) Load() SRT             { return SRT(r.U32.Load()) }
func (r *RSRT) Store(b SRT)           { r.U32.Store(uint32(b)) }

type RMSRT struct{ mmio.UM32 }

func (rm RMSRT) Load() SRT   { return SRT(rm.UM32.Load()) }
func (rm RMSRT) Store(b SRT) { rm.UM32.Store(uint32(b)) }

type STET uint32

type RSTET struct{ mmio.U32 }

func (r *RSTET) LoadBits(mask STET) STET { return STET(r.U32.LoadBits(uint32(mask))) }
func (r *RSTET) StoreBits(mask, b STET)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSTET) SetBits(mask STET)       { r.U32.SetBits(uint32(mask)) }
func (r *RSTET) ClearBits(mask STET)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSTET) Load() STET              { return STET(r.U32.Load()) }
func (r *RSTET) Store(b STET)            { r.U32.Store(uint32(b)) }

type RMSTET struct{ mmio.UM32 }

func (rm RMSTET) Load() STET   { return STET(rm.UM32.Load()) }
func (rm RMSTET) Store(b STET) { rm.UM32.Store(uint32(b)) }

type HTX uint32

type RHTX struct{ mmio.U32 }

func (r *RHTX) LoadBits(mask HTX) HTX { return HTX(r.U32.LoadBits(uint32(mask))) }
func (r *RHTX) StoreBits(mask, b HTX) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHTX) SetBits(mask HTX)      { r.U32.SetBits(uint32(mask)) }
func (r *RHTX) ClearBits(mask HTX)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHTX) Load() HTX             { return HTX(r.U32.Load()) }
func (r *RHTX) Store(b HTX)           { r.U32.Store(uint32(b)) }

type RMHTX struct{ mmio.UM32 }

func (rm RMHTX) Load() HTX   { return HTX(rm.UM32.Load()) }
func (rm RMHTX) Store(b HTX) { rm.UM32.Store(uint32(b)) }

type DMASA uint32

type RDMASA struct{ mmio.U32 }

func (r *RDMASA) LoadBits(mask DMASA) DMASA { return DMASA(r.U32.LoadBits(uint32(mask))) }
func (r *RDMASA) StoreBits(mask, b DMASA)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDMASA) SetBits(mask DMASA)        { r.U32.SetBits(uint32(mask)) }
func (r *RDMASA) ClearBits(mask DMASA)      { r.U32.ClearBits(uint32(mask)) }
func (r *RDMASA) Load() DMASA               { return DMASA(r.U32.Load()) }
func (r *RDMASA) Store(b DMASA)             { r.U32.Store(uint32(b)) }

type RMDMASA struct{ mmio.UM32 }

func (rm RMDMASA) Load() DMASA   { return DMASA(rm.UM32.Load()) }
func (rm RMDMASA) Store(b DMASA) { rm.UM32.Store(uint32(b)) }

type TCR uint32

type RTCR struct{ mmio.U32 }

func (r *RTCR) LoadBits(mask TCR) TCR { return TCR(r.U32.LoadBits(uint32(mask))) }
func (r *RTCR) StoreBits(mask, b TCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTCR) SetBits(mask TCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTCR) ClearBits(mask TCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTCR) Load() TCR             { return TCR(r.U32.Load()) }
func (r *RTCR) Store(b TCR)           { r.U32.Store(uint32(b)) }

type RMTCR struct{ mmio.UM32 }

func (rm RMTCR) Load() TCR   { return TCR(rm.UM32.Load()) }
func (rm RMTCR) Store(b TCR) { rm.UM32.Store(uint32(b)) }

type DE_EN uint32

type RDE_EN struct{ mmio.U32 }

func (r *RDE_EN) LoadBits(mask DE_EN) DE_EN { return DE_EN(r.U32.LoadBits(uint32(mask))) }
func (r *RDE_EN) StoreBits(mask, b DE_EN)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDE_EN) SetBits(mask DE_EN)        { r.U32.SetBits(uint32(mask)) }
func (r *RDE_EN) ClearBits(mask DE_EN)      { r.U32.ClearBits(uint32(mask)) }
func (r *RDE_EN) Load() DE_EN               { return DE_EN(r.U32.Load()) }
func (r *RDE_EN) Store(b DE_EN)             { r.U32.Store(uint32(b)) }

type RMDE_EN struct{ mmio.UM32 }

func (rm RMDE_EN) Load() DE_EN   { return DE_EN(rm.UM32.Load()) }
func (rm RMDE_EN) Store(b DE_EN) { rm.UM32.Store(uint32(b)) }

type RE_EN uint32

type RRE_EN struct{ mmio.U32 }

func (r *RRE_EN) LoadBits(mask RE_EN) RE_EN { return RE_EN(r.U32.LoadBits(uint32(mask))) }
func (r *RRE_EN) StoreBits(mask, b RE_EN)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRE_EN) SetBits(mask RE_EN)        { r.U32.SetBits(uint32(mask)) }
func (r *RRE_EN) ClearBits(mask RE_EN)      { r.U32.ClearBits(uint32(mask)) }
func (r *RRE_EN) Load() RE_EN               { return RE_EN(r.U32.Load()) }
func (r *RRE_EN) Store(b RE_EN)             { r.U32.Store(uint32(b)) }

type RMRE_EN struct{ mmio.UM32 }

func (rm RMRE_EN) Load() RE_EN   { return RE_EN(rm.UM32.Load()) }
func (rm RMRE_EN) Store(b RE_EN) { rm.UM32.Store(uint32(b)) }

type DET uint32

type RDET struct{ mmio.U32 }

func (r *RDET) LoadBits(mask DET) DET { return DET(r.U32.LoadBits(uint32(mask))) }
func (r *RDET) StoreBits(mask, b DET) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDET) SetBits(mask DET)      { r.U32.SetBits(uint32(mask)) }
func (r *RDET) ClearBits(mask DET)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDET) Load() DET             { return DET(r.U32.Load()) }
func (r *RDET) Store(b DET)           { r.U32.Store(uint32(b)) }

type RMDET struct{ mmio.UM32 }

func (rm RMDET) Load() DET   { return DET(rm.UM32.Load()) }
func (rm RMDET) Store(b DET) { rm.UM32.Store(uint32(b)) }

type TAT uint32

type RTAT struct{ mmio.U32 }

func (r *RTAT) LoadBits(mask TAT) TAT { return TAT(r.U32.LoadBits(uint32(mask))) }
func (r *RTAT) StoreBits(mask, b TAT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTAT) SetBits(mask TAT)      { r.U32.SetBits(uint32(mask)) }
func (r *RTAT) ClearBits(mask TAT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTAT) Load() TAT             { return TAT(r.U32.Load()) }
func (r *RTAT) Store(b TAT)           { r.U32.Store(uint32(b)) }

type RMTAT struct{ mmio.UM32 }

func (rm RMTAT) Load() TAT   { return TAT(rm.UM32.Load()) }
func (rm RMTAT) Store(b TAT) { rm.UM32.Store(uint32(b)) }

type DLF uint32

type RDLF struct{ mmio.U32 }

func (r *RDLF) LoadBits(mask DLF) DLF { return DLF(r.U32.LoadBits(uint32(mask))) }
func (r *RDLF) StoreBits(mask, b DLF) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDLF) SetBits(mask DLF)      { r.U32.SetBits(uint32(mask)) }
func (r *RDLF) ClearBits(mask DLF)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDLF) Load() DLF             { return DLF(r.U32.Load()) }
func (r *RDLF) Store(b DLF)           { r.U32.Store(uint32(b)) }

type RMDLF struct{ mmio.UM32 }

func (rm RMDLF) Load() DLF   { return DLF(rm.UM32.Load()) }
func (rm RMDLF) Store(b DLF) { rm.UM32.Store(uint32(b)) }

type RAR uint32

type RRAR struct{ mmio.U32 }

func (r *RRAR) LoadBits(mask RAR) RAR { return RAR(r.U32.LoadBits(uint32(mask))) }
func (r *RRAR) StoreBits(mask, b RAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRAR) SetBits(mask RAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RRAR) ClearBits(mask RAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRAR) Load() RAR             { return RAR(r.U32.Load()) }
func (r *RRAR) Store(b RAR)           { r.U32.Store(uint32(b)) }

type RMRAR struct{ mmio.UM32 }

func (rm RMRAR) Load() RAR   { return RAR(rm.UM32.Load()) }
func (rm RMRAR) Store(b RAR) { rm.UM32.Store(uint32(b)) }

type TAR uint32

type RTAR struct{ mmio.U32 }

func (r *RTAR) LoadBits(mask TAR) TAR { return TAR(r.U32.LoadBits(uint32(mask))) }
func (r *RTAR) StoreBits(mask, b TAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTAR) SetBits(mask TAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTAR) ClearBits(mask TAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTAR) Load() TAR             { return TAR(r.U32.Load()) }
func (r *RTAR) Store(b TAR)           { r.U32.Store(uint32(b)) }

type RMTAR struct{ mmio.UM32 }

func (rm RMTAR) Load() TAR   { return TAR(rm.UM32.Load()) }
func (rm RMTAR) Store(b TAR) { rm.UM32.Store(uint32(b)) }

type LCR_EXT uint32

type RLCR_EXT struct{ mmio.U32 }

func (r *RLCR_EXT) LoadBits(mask LCR_EXT) LCR_EXT { return LCR_EXT(r.U32.LoadBits(uint32(mask))) }
func (r *RLCR_EXT) StoreBits(mask, b LCR_EXT)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCR_EXT) SetBits(mask LCR_EXT)          { r.U32.SetBits(uint32(mask)) }
func (r *RLCR_EXT) ClearBits(mask LCR_EXT)        { r.U32.ClearBits(uint32(mask)) }
func (r *RLCR_EXT) Load() LCR_EXT                 { return LCR_EXT(r.U32.Load()) }
func (r *RLCR_EXT) Store(b LCR_EXT)               { r.U32.Store(uint32(b)) }

type RMLCR_EXT struct{ mmio.UM32 }

func (rm RMLCR_EXT) Load() LCR_EXT   { return LCR_EXT(rm.UM32.Load()) }
func (rm RMLCR_EXT) Store(b LCR_EXT) { rm.UM32.Store(uint32(b)) }

type CPR uint32

type RCPR struct{ mmio.U32 }

func (r *RCPR) LoadBits(mask CPR) CPR { return CPR(r.U32.LoadBits(uint32(mask))) }
func (r *RCPR) StoreBits(mask, b CPR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPR) SetBits(mask CPR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCPR) ClearBits(mask CPR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCPR) Load() CPR             { return CPR(r.U32.Load()) }
func (r *RCPR) Store(b CPR)           { r.U32.Store(uint32(b)) }

type RMCPR struct{ mmio.UM32 }

func (rm RMCPR) Load() CPR   { return CPR(rm.UM32.Load()) }
func (rm RMCPR) Store(b CPR) { rm.UM32.Store(uint32(b)) }

type UCV uint32

type RUCV struct{ mmio.U32 }

func (r *RUCV) LoadBits(mask UCV) UCV { return UCV(r.U32.LoadBits(uint32(mask))) }
func (r *RUCV) StoreBits(mask, b UCV) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUCV) SetBits(mask UCV)      { r.U32.SetBits(uint32(mask)) }
func (r *RUCV) ClearBits(mask UCV)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUCV) Load() UCV             { return UCV(r.U32.Load()) }
func (r *RUCV) Store(b UCV)           { r.U32.Store(uint32(b)) }

type RMUCV struct{ mmio.UM32 }

func (rm RMUCV) Load() UCV   { return UCV(rm.UM32.Load()) }
func (rm RMUCV) Store(b UCV) { rm.UM32.Store(uint32(b)) }

type CTR uint32

type RCTR struct{ mmio.U32 }

func (r *RCTR) LoadBits(mask CTR) CTR { return CTR(r.U32.LoadBits(uint32(mask))) }
func (r *RCTR) StoreBits(mask, b CTR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCTR) SetBits(mask CTR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCTR) ClearBits(mask CTR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCTR) Load() CTR             { return CTR(r.U32.Load()) }
func (r *RCTR) Store(b CTR)           { r.U32.Store(uint32(b)) }

type RMCTR struct{ mmio.UM32 }

func (rm RMCTR) Load() CTR   { return CTR(rm.UM32.Load()) }
func (rm RMCTR) Store(b CTR) { rm.UM32.Store(uint32(b)) }
